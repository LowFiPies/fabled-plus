var uc=Object.defineProperty;var pc=(s,e,t)=>e in s?uc(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var r=(s,e,t)=>(pc(s,typeof e!="symbol"?e+"":e,t),t);import{e as xe}from"../chunks/singletons.c9a94d8e.js";import{S as fe,i as ge,s as we,y as K,z as Q,A as X,g as R,d as C,B as Z,C as Fe,w as ue,D as pe,E as he,F as de,a as B,c as U,b as Y,h as y,k as D,q as M,l as E,m as q,r as ee,n as v,G as f,H as Xe,I as J,J as Re,K as Pe,u as Ye,L as Se,M as Ro,N as No,O as pr,P as zr,Q as Ae,R as at,T as je,U as Yr,V as Kr,W as Xr,X as qe,Y as So,Z as Do,_ as Zr,e as De,$ as hc,v as Ee,f as $e,a0 as Jl,a1 as Ql,a2 as Je,p as hr,a3 as mc,o as Jr,a4 as dc,a5 as Qr,a6 as Ml,a7 as fc,a8 as mr,x as dr}from"../chunks/index.f9facb9c.js";import{P as gc,v as wc,s as Mr,l as yc,a as ec,b as Tc,c as er,t as vc,g as ht,d as mt,e as Be,f as fr,h as Qe,i as Ne,j as gr,R as Ke,k as ne,m as tr,n as Eo,o as bc,p as tc,q as kc,r as _c,u as ac,w as ze,x as Ic,y as Ac,z as Sc,A as nt,B as sc,C as Dc,D as Ec,E as $c,F as Pc,G as Vc,H as ar,I as wr,J as ot,K as dt,L as Ze,M as oc,N as st,O as ct,Q as nc,S as ic,T as qc,U as Oc,V as lc,W as yr,X as Lc,Y as Fc,Z as ut,_ as pt,$ as Rc,a0 as Nc,a1 as xc,a2 as Tr,a3 as vr,a4 as br,a5 as Cc,a6 as Hc,a7 as Wc}from"../chunks/store.0606048c.js";import{M as sr,S as Bc,P as Ce,a as te,b as O,c as Co,u as kr,s as _r,d as Ir,e as Uc,m as Gc,o as jc}from"../chunks/modal-service.cdc17ec6.js";import{A as zc,S as $o,M as Yc,L as Kc}from"../chunks/LoreInput.e585f99b.js";import{P as Te,T as it,f as Ue,s as ft,c as Xc}from"../chunks/Toggle.40a462b3.js";const Ho="https://paste.travja.dev",rc=s=>{if(typeof s!="string")return Promise.reject(new Error('You cannot send that. Please include a "content" argument that is a valid string.'));if(s==="")return Promise.reject(new Error("You cannot send nothing."));const e={method:"POST",body:s,headers:{"Content-Type":"text/plain"}};return fetch(`${Ho}/documents`,e).then(t=>t.json()).then(t=>{if(!t.key)throw new Error("Did not receive hastebin key.");return`${Ho}/${t.key}`})},cc=async s=>(s.url&&(s.url.includes("astebin.com")||s.url.includes("paste.travja.dev"))&&!s.url.includes("raw")&&(s.url=s.url.replace(/(astebin\.com|paste\.travja\.dev)/,"$1/raw")),!s.url&&s.id&&(s.url=`${Ho}/raw/${s.id}`),s.url?await(await fetch(s.url)).text():""),Zc=!1,xo="promcteam.github.io",Ge=`


~~~~~


`,Jc=({url:s})=>{if(s.host.includes("localhost"))return;if(s.searchParams.has("migrationData")){cc({url:s.searchParams.get("migrationData")||void 0}).then(n=>{const c=n.split(Ge)[0],l=n.split(Ge)[1],u=n.split(Ge)[2],p=n.split(Ge)[3];localStorage.setItem("skillData",c),localStorage.setItem("classData",l),localStorage.setItem("skillFolders",u),localStorage.setItem("classFolders",p),window.location.href=`http://${xo}${xe}`}).catch(console.error);return}if(s.host===xo||!localStorage.getItem("skillData"))return;alert("We're migrating the new editor to the old URL. You're now going to be redirected. Your skills/classes should remain in tact.");const e=localStorage.getItem("skillData"),t=localStorage.getItem("classData"),a=localStorage.getItem("skillFolders"),o=localStorage.getItem("classFolders"),i=e+Ge+t+Ge+a+Ge+o;rc(i).then(n=>window.location.href=`http://${xo}/proskillapi?migrationData=${n}`)},Up=Object.freeze(Object.defineProperty({__proto__:null,load:Jc,ssr:Zc},Symbol.toStringTag,{value:"Module"}));function Qc(s){let e,t,a;function o(n){s[3](n)}let i={};return s[0]!==void 0&&(i.value=s[0]),e=new zc({props:i}),ue.push(()=>pe(e,"value",o)),{c(){K(e.$$.fragment)},l(n){Q(e.$$.fragment,n)},m(n,c){X(e,n,c),a=!0},p(n,c){const l={};!t&&c&1&&(t=!0,l.value=n[0],he(()=>t=!1)),e.$set(l)},i(n){a||(R(e.$$.fragment,n),a=!0)},o(n){C(e.$$.fragment,n),a=!1},d(n){Z(e,n)}}}function Mc(s){let e,t;return e=new Te({props:{label:s[1],tooltip:s[2],$$slots:{default:[Qc]},$$scope:{ctx:s}}}),{c(){K(e.$$.fragment)},l(a){Q(e.$$.fragment,a)},m(a,o){X(e,a,o),t=!0},p(a,[o]){const i={};o&2&&(i.label=a[1]),o&4&&(i.tooltip=a[2]),o&33&&(i.$$scope={dirty:o,ctx:a}),e.$set(i)},i(a){t||(R(e.$$.fragment,a),t=!0)},o(a){C(e.$$.fragment,a),t=!1},d(a){Z(e,a)}}}function eu(s,e,t){let{data:a}=e,{name:o=""}=e,{tooltip:i=void 0}=e;const n=Fe();function c(l){a=l,t(0,a)}return s.$$set=l=>{"data"in l&&t(0,a=l.data),"name"in l&&t(1,o=l.name),"tooltip"in l&&t(2,i=l.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&(a||!a)&&n("save")},[a,o,i,c]}class tu extends fe{constructor(e){super(),ge(this,e,eu,Mc,we,{data:0,name:1,tooltip:2})}}class ke{constructor(){r(this,"requirements",{});r(this,"requireValue",(e,t)=>(this.requirements[e]=t,this));r(this,"meetsRequirements",e=>{for(const t in this.requirements)if(!this.requirements[t].includes(e.getRawData().get(t)))return!1;return!0});r(this,"meetsPreviewRequirements",e=>{for(const t in this.requirements)if(!this.requirements[t].includes(e.getRawPreviewData().get(t)))return!1;return!0})}}class g extends ke{constructor(t,a,o=0,i=0){super();r(this,"component",tu);r(this,"name");r(this,"key");r(this,"data");r(this,"tooltip");r(this,"setTooltip",t=>(this.tooltip=t,this));r(this,"clone",()=>new g(this.name,this.key,this.data.base,this.data.scale));r(this,"getData",()=>{const t={};return t[this.key+"-base"]=this.data.base||0,t[this.key+"-scale"]=this.data.scale||0,t});r(this,"getSummary",()=>this.data.base.toString());r(this,"deserialize",t=>{this.data.base=t.get(this.key+"-base",0),this.data.scale=t.get(this.key+"-scale",0)});this.name=t,this.key=a,this.data=new gc(t,o,i)}}function au(s){let e,t,a;function o(n){s[6](n)}let i={id:s[1],placeholder:s[2],multiple:s[3],data:s[4]?["Any",...s[5].BLOCKS]:s[5].BLOCKS};return s[0]!==void 0&&(i.selected=s[0]),e=new $o({props:i}),ue.push(()=>pe(e,"selected",o)),{c(){K(e.$$.fragment)},l(n){Q(e.$$.fragment,n)},m(n,c){X(e,n,c),a=!0},p(n,[c]){const l={};c&2&&(l.id=n[1]),c&4&&(l.placeholder=n[2]),c&8&&(l.multiple=n[3]),c&48&&(l.data=n[4]?["Any",...n[5].BLOCKS]:n[5].BLOCKS),!t&&c&1&&(t=!0,l.selected=n[0],he(()=>t=!1)),e.$set(l)},i(n){a||(R(e.$$.fragment,n),a=!0)},o(n){C(e.$$.fragment,n),a=!1},d(n){Z(e,n)}}}function su(s,e,t){let a;de(s,wc,p=>t(5,a=p));let{id:o=void 0}=e,{placeholder:i=""}=e,{multiple:n=!1}=e,{any:c=!1}=e,{selected:l=void 0}=e;function u(p){l=p,t(0,l)}return s.$$set=p=>{"id"in p&&t(1,o=p.id),"placeholder"in p&&t(2,i=p.placeholder),"multiple"in p&&t(3,n=p.multiple),"any"in p&&t(4,c=p.any),"selected"in p&&t(0,l=p.selected)},[l,o,i,n,c,a,u]}let ou=class extends fe{constructor(e){super(),ge(this,e,su,au,we,{id:1,placeholder:2,multiple:3,any:4,selected:0})}};function nu(s){let e,t,a;function o(n){s[1](n)}let i={any:!0,multiple:!0};return s[0].material!==void 0&&(i.selected=s[0].material),e=new ou({props:i}),ue.push(()=>pe(e,"selected",o)),{c(){K(e.$$.fragment)},l(n){Q(e.$$.fragment,n)},m(n,c){X(e,n,c),a=!0},p(n,c){const l={};!t&&c&1&&(t=!0,l.selected=n[0].material,he(()=>t=!1)),e.$set(l)},i(n){a||(R(e.$$.fragment,n),a=!0)},o(n){C(e.$$.fragment,n),a=!1},d(n){Z(e,n)}}}function iu(s){let e,t,a,o,i;e=new Te({props:{label:"Material",tooltip:"[material] "+s[0].materialTooltip,$$slots:{default:[nu]},$$scope:{ctx:s}}});function n(l){s[2](l)}let c={type:"number",intMode:!0,label:"Data",tooltip:"[data] "+s[0].dataTooltip};return s[0].data!==void 0&&(c.value=s[0].data),a=new Te({props:c}),ue.push(()=>pe(a,"value",n)),{c(){K(e.$$.fragment),t=B(),K(a.$$.fragment)},l(l){Q(e.$$.fragment,l),t=U(l),Q(a.$$.fragment,l)},m(l,u){X(e,l,u),Y(l,t,u),X(a,l,u),i=!0},p(l,[u]){const p={};u&1&&(p.tooltip="[material] "+l[0].materialTooltip),u&17&&(p.$$scope={dirty:u,ctx:l}),e.$set(p);const m={};u&1&&(m.tooltip="[data] "+l[0].dataTooltip),!o&&u&1&&(o=!0,m.value=l[0].data,he(()=>o=!1)),a.$set(m)},i(l){i||(R(e.$$.fragment,l),R(a.$$.fragment,l),i=!0)},o(l){C(e.$$.fragment,l),C(a.$$.fragment,l),i=!1},d(l){Z(e,l),l&&y(t),Z(a,l)}}}function lu(s,e,t){let{data:a}=e;const o=Fe();function i(c){s.$$.not_equal(a.material,c)&&(a.material=c,t(0,a))}function n(c){s.$$.not_equal(a.data,c)&&(a.data=c,t(0,a))}return s.$$set=c=>{"data"in c&&t(0,a=c.data)},s.$$.update=()=>{s.$$.dirty&1&&a&&o("save")},[a,i,n]}class ru extends fe{constructor(e){super(),ge(this,e,lu,iu,we,{data:0})}}class Po extends ke{constructor(t,a){super();r(this,"key","block");r(this,"component",ru);r(this,"data",{material:["Any"],data:-1,materialTooltip:"",dataTooltip:""});r(this,"setTooltip",()=>{throw new Error("Block Select requires tooltips be set in the constructor")});r(this,"clone",()=>{const t=new Po;return t.data=JSON.parse(JSON.stringify(this.data)),t});r(this,"getData",()=>{const t={};return t.material=this.data.material,t.data=this.data.data??-1,t});r(this,"getSummary",()=>this.data.material+(this.data.data!=-1?":"+this.data.data:""));r(this,"deserialize",t=>{this.data.material=t.get("material",["Any"]),this.data.data=t.get("data",-1)});this.data.materialTooltip=t||"",this.data.dataTooltip=a||""}}function cu(s){let e,t,a,o,i,n,c,l,u,p,m,w,A,V,h,d,T,_,k,j,$,L,S,G;return{c(){e=D("div"),t=D("div"),a=D("div"),o=M("Upload File"),i=B(),n=D("label"),c=M("Select File"),l=B(),u=D("input"),p=B(),m=D("div"),w=D("span"),A=M("OR"),V=B(),h=D("div"),d=D("div"),T=M("Import from URL"),_=B(),k=D("input"),j=B(),$=D("div"),L=M("Import"),this.h()},l(F){e=E(F,"DIV",{class:!0});var H=q(e);t=E(H,"DIV",{class:!0});var z=q(t);a=E(z,"DIV",{});var le=q(a);o=ee(le,"Upload File"),le.forEach(y),i=U(z),n=E(z,"LABEL",{for:!0,class:!0});var ve=q(n);c=ee(ve,"Select File"),ve.forEach(y),l=U(z),u=E(z,"INPUT",{id:!0,type:!0,class:!0}),z.forEach(y),p=U(H),m=E(H,"DIV",{class:!0});var ie=q(m);w=E(ie,"SPAN",{class:!0});var be=q(w);A=ee(be,"OR"),be.forEach(y),ie.forEach(y),V=U(H),h=E(H,"DIV",{class:!0});var W=q(h);d=E(W,"DIV",{});var se=q(d);T=ee(se,"Import from URL"),se.forEach(y),_=U(W),k=E(W,"INPUT",{class:!0}),j=U(W),$=E(W,"DIV",{class:!0});var me=q($);L=ee(me,"Import"),me.forEach(y),W.forEach(y),H.forEach(y),this.h()},h(){v(n,"for","file-upload"),v(n,"class","button"),v(u,"id","file-upload"),v(u,"type","file"),v(u,"class","hidden svelte-8b3mcy"),u.multiple=!0,v(t,"class","option svelte-8b3mcy"),v(w,"class","svelte-8b3mcy"),v(m,"class","or svelte-8b3mcy"),v(k,"class","svelte-8b3mcy"),v($,"class","button"),v(h,"class","option svelte-8b3mcy"),v(e,"class","options svelte-8b3mcy")},m(F,H){Y(F,e,H),f(e,t),f(t,a),f(a,o),f(t,i),f(t,n),f(n,c),f(t,l),f(t,u),f(e,p),f(e,m),f(m,w),f(w,A),f(e,V),f(e,h),f(h,d),f(d,T),f(h,_),f(h,k),Xe(k,s[1]),f(h,j),f(h,$),f($,L),S||(G=[J(u,"change",s[4]),J(k,"input",s[5]),J($,"click",s[3]),J($,"keypress",s[6])],S=!0)},p(F,H){H&2&&k.value!==F[1]&&Xe(k,F[1])},d(F){F&&y(e),S=!1,Re(G)}}}function uu(s){let e,t;return e=new sr({props:{open:!0,$$slots:{default:[cu]},$$scope:{ctx:s}}}),e.$on("close",s[2]),{c(){K(e.$$.fragment)},l(a){Q(e.$$.fragment,a)},m(a,o){X(e,a,o),t=!0},p(a,[o]){const i={};o&131&&(i.$$scope={dirty:o,ctx:a}),e.$set(i)},i(a){t||(R(e.$$.fragment,a),t=!0)},o(a){C(e.$$.fragment,a),t=!1},d(a){Z(e,a)}}}function pu(s,e,t){let a,o;const i=()=>{t(1,a=t(0,o=void 0)),Mr(!1)},n=()=>{a&&(a.startsWith("http")||t(1,a="https://"+a),cc({url:a}).then(p=>{i(),yc(p)}).catch(console.error))};function c(){o=this.files,t(0,o)}function l(){a=this.value,t(1,a)}const u=p=>p.key==="Enter"&&n();return s.$$.update=()=>{if(s.$$.dirty&1&&o&&o.length>0)for(const p of o)p.name.indexOf(".yml")!=-1&&(ec(p),i())},[o,a,i,n,c,l,u]}class hu extends fe{constructor(e){super(),ge(this,e,pu,uu,we,{})}}function Ar(s){let e,t,a=s[0]==="class"?"Class":"Skill",o,i,n,c;return{c(){e=D("div"),t=M("Share "),o=M(a),this.h()},l(l){e=E(l,"DIV",{class:!0,title:!0});var u=q(e);t=ee(u,"Share "),o=ee(u,a),u.forEach(y),this.h()},h(){v(e,"class","chip share svelte-yx67gl"),v(e,"title",i="Share "+(s[0]==="class"?"Class":"Skill"))},m(l,u){Y(l,e,u),f(e,t),f(e,o),n||(c=J(e,"click",s[1]),n=!0)},p(l,u){u&1&&a!==(a=l[0]==="class"?"Class":"Skill")&&Ye(o,a),u&1&&i!==(i="Share "+(l[0]==="class"?"Class":"Skill"))&&v(e,"title",i)},d(l){l&&y(e),n=!1,c()}}}function mu(s){let e,t,a,o,i,n,c,l,u,p,m,w,A,V,h=s[0]&&Ar(s);return{c(){e=D("div"),t=D("nav"),a=D("div"),o=D("span"),i=M("menu"),n=B(),c=D("div"),l=B(),u=D("div"),p=D("div"),m=M("Import"),w=B(),h&&h.c(),this.h()},l(d){e=E(d,"DIV",{class:!0});var T=q(e);t=E(T,"NAV",{class:!0});var _=q(t);a=E(_,"DIV",{class:!0});var k=q(a);o=E(k,"SPAN",{class:!0});var j=q(o);i=ee(j,"menu"),j.forEach(y),k.forEach(y),n=U(_),c=E(_,"DIV",{}),q(c).forEach(y),l=U(_),u=E(_,"DIV",{class:!0});var $=q(u);p=E($,"DIV",{class:!0,title:!0});var L=q(p);m=ee(L,"Import"),L.forEach(y),w=U($),h&&h.l($),$.forEach(y),_.forEach(y),T.forEach(y),this.h()},h(){v(o,"class","material-symbols-rounded"),v(a,"class","chip hamburger svelte-yx67gl"),v(p,"class","chip import svelte-yx67gl"),v(p,"title","Import Data"),v(u,"class","transfer svelte-yx67gl"),v(t,"class","svelte-yx67gl"),v(e,"class","nav-wrap svelte-yx67gl")},m(d,T){Y(d,e,T),f(e,t),f(t,a),f(a,o),f(o,i),f(t,n),f(t,c),f(t,l),f(t,u),f(u,p),f(p,m),f(u,w),h&&h.m(u,null),A||(V=[J(a,"click",s[3]),J(p,"click",s[2])],A=!0)},p(d,[T]){d[0]?h?h.p(d,T):(h=Ar(d),h.c(),h.m(u,null)):h&&(h.d(1),h=null)},i:Pe,o:Pe,d(d){d&&y(e),h&&h.d(),A=!1,Re(V)}}}function du(s,e,t){let a;return de(s,Tc,c=>t(0,a=c)),[a,()=>{let c=Se(er);if(!c)return;let l=c.serializeYaml().toString();rc(l).then(u=>{var p;(p=navigator==null?void 0:navigator.clipboard)==null||p.writeText(u),window.open(u)}).catch(u=>console.error(u))},()=>{Mr(!0)},c=>{c.stopPropagation(),vc()}]}class fu extends fe{constructor(e){super(),ge(this,e,du,mu,we,{})}}function gu(s){let e,t,a;return{c(){e=Ro("svg"),t=Ro("g"),a=Ro("path"),this.h()},l(o){e=No(o,"svg",{viewBox:!0,class:!0});var i=q(e);t=No(i,"g",{fill:!0});var n=q(t);a=No(n,"path",{d:!0}),q(a).forEach(y),n.forEach(y),i.forEach(y),this.h()},h(){v(a,"d","M26.0015 6.9529C24.0021 6.03845 21.8787 5.37198 19.6623 5C19.3833 5.48048 19.0733 6.13144 18.8563 6.64292C16.4989 6.30193 14.1585 6.30193 11.8336 6.64292C11.6166 6.13144 11.2911 5.48048 11.0276 5C8.79575 5.37198 6.67235 6.03845 4.6869 6.9529C0.672601 12.8736 -0.41235 18.6548 0.130124 24.3585C2.79599 26.2959 5.36889 27.4739 7.89682 28.2489C8.51679 27.4119 9.07477 26.5129 9.55525 25.5675C8.64079 25.2265 7.77283 24.808 6.93587 24.312C7.15286 24.1571 7.36986 23.9866 7.57135 23.8161C12.6241 26.1255 18.0969 26.1255 23.0876 23.8161C23.3046 23.9866 23.5061 24.1571 23.7231 24.312C22.8861 24.808 22.0182 25.2265 21.1037 25.5675C21.5842 26.5129 22.1422 27.4119 22.7621 28.2489C25.2885 27.4739 27.8769 26.2959 30.5288 24.3585C31.1952 17.7559 29.4733 12.0212 26.0015 6.9529ZM10.2527 20.8402C8.73376 20.8402 7.49382 19.4608 7.49382 17.7714C7.49382 16.082 8.70276 14.7025 10.2527 14.7025C11.7871 14.7025 13.0425 16.082 13.0115 17.7714C13.0115 19.4608 11.7871 20.8402 10.2527 20.8402ZM20.4373 20.8402C18.9183 20.8402 17.6768 19.4608 17.6768 17.7714C17.6768 16.082 18.8873 14.7025 20.4373 14.7025C21.9717 14.7025 23.2271 16.082 23.1961 17.7714C23.1961 19.4608 21.9872 20.8402 20.4373 20.8402Z"),v(t,"fill","currentColor"),v(e,"viewBox","0 0 30 34"),v(e,"class","logo-3oeRIY svelte-evyltu")},m(o,i){Y(o,e,i),f(e,t),f(t,a)},p:Pe,i:Pe,o:Pe,d(o){o&&y(e)}}}class wu extends fe{constructor(e){super(),ge(this,e,null,gu,we,{})}}function yu(s){let e,t,a,o,i,n,c,l,u,p,m=new Date().getFullYear()+"",w,A,V,h,d,T,_,k,j,$,L,S,G,F,H,z,le,ve,ie,be;return d=new wu({}),{c(){e=D("div"),t=D("div"),a=D("h1"),o=M("ProSkillAPI"),i=B(),n=D("h2"),c=M("Dynamic Editor"),l=B(),u=D("div"),p=M("© ProMCTeam "),w=M(m),A=B(),V=D("div"),h=D("a"),K(d.$$.fragment),T=B(),_=D("a"),k=D("img"),$=B(),L=D("a"),S=D("img"),F=B(),H=D("a"),z=D("span"),le=M("help"),this.h()},l(W){e=E(W,"DIV",{id:!0,class:!0});var se=q(e);t=E(se,"DIV",{class:!0});var me=q(t);a=E(me,"H1",{class:!0});var He=q(a);o=ee(He,"ProSkillAPI"),He.forEach(y),i=U(me),n=E(me,"H2",{class:!0});var ce=q(n);c=ee(ce,"Dynamic Editor"),ce.forEach(y),l=U(me),u=E(me,"DIV",{class:!0});var ye=q(u);p=ee(ye,"© ProMCTeam "),w=ee(ye,m),ye.forEach(y),me.forEach(y),A=U(se),V=E(se,"DIV",{class:!0});var P=q(V);h=E(P,"A",{class:!0,href:!0,title:!0});var oe=q(h);Q(d.$$.fragment,oe),oe.forEach(y),T=U(P),_=E(P,"A",{class:!0,href:!0,title:!0});var We=q(_);k=E(We,"IMG",{src:!0,class:!0}),We.forEach(y),$=U(P),L=E(P,"A",{class:!0,href:!0,title:!0});var Ie=q(L);S=E(Ie,"IMG",{src:!0,class:!0}),Ie.forEach(y),F=U(P),H=E(P,"A",{class:!0,href:!0,title:!0});var et=q(H);z=E(et,"SPAN",{class:!0});var tt=q(z);le=ee(tt,"help"),tt.forEach(y),et.forEach(y),P.forEach(y),se.forEach(y),this.h()},h(){v(a,"class","accent svelte-12n421s"),v(n,"class","svelte-12n421s"),v(u,"class","copy svelte-12n421s"),v(t,"class","home svelte-12n421s"),v(h,"class","social discord svelte-12n421s"),v(h,"href","https://discord.gg/6UzkTe6RvW"),v(h,"title","Join our Discord"),pr(k.src,j=xe+"/github-mark-white.svg")||v(k,"src",j),v(k,"class","svelte-12n421s"),v(_,"class","social github svelte-12n421s"),v(_,"href","https://github.com/promcteam/proskillapi"),v(_,"title","Check out our GitHub"),pr(S.src,G=xe+"/spigot.png")||v(S,"src",G),v(S,"class","svelte-12n421s"),v(L,"class","social spigot svelte-12n421s"),v(L,"href","https://www.spigotmc.org/resources/proskillapi-create-custom-races-classes-skills-spells-with-an-easy-online-editor.91913/"),v(L,"title","Check out our resource on Spigot"),v(z,"class","material-symbols-rounded"),v(H,"class","social wiki svelte-12n421s"),v(H,"href","https://promcteam.com/wiki/index.php?title=Proskillapi:Proskillapi"),v(H,"title","Wiki"),v(V,"class","socials svelte-12n421s"),v(e,"id","header"),v(e,"class","svelte-12n421s")},m(W,se){Y(W,e,se),f(e,t),f(t,a),f(a,o),f(t,i),f(t,n),f(n,c),f(t,l),f(t,u),f(u,p),f(u,w),f(e,A),f(e,V),f(V,h),X(d,h,null),f(V,T),f(V,_),f(_,k),f(V,$),f(V,L),f(L,S),f(V,F),f(V,H),f(H,z),f(z,le),ve=!0,ie||(be=J(t,"click",s[0]),ie=!0)},p:Pe,i(W){ve||(R(d.$$.fragment,W),ve=!0)},o(W){C(d.$$.fragment,W),ve=!1},d(W){W&&y(e),Z(d),ie=!1,be()}}}function Tu(s){return[()=>ht(`${xe}/`)]}class vu extends fe{constructor(e){super(),ge(this,e,Tu,yu,we,{})}}function bu(s){let e,t,a,o,i;function n(p){s[3](p)}function c(p){s[4](p)}function l(p){s[5](p)}let u={};return s[0].selected!==void 0&&(u.selected=s[0].selected),s[0].value!==void 0&&(u.data=s[0].value),s[0].multiple!==void 0&&(u.multiple=s[0].multiple),e=new $o({props:u}),ue.push(()=>pe(e,"selected",n)),ue.push(()=>pe(e,"data",c)),ue.push(()=>pe(e,"multiple",l)),{c(){K(e.$$.fragment)},l(p){Q(e.$$.fragment,p)},m(p,m){X(e,p,m),i=!0},p(p,m){const w={};!t&&m&1&&(t=!0,w.selected=p[0].selected,he(()=>t=!1)),!a&&m&1&&(a=!0,w.data=p[0].value,he(()=>a=!1)),!o&&m&1&&(o=!0,w.multiple=p[0].multiple,he(()=>o=!1)),e.$set(w)},i(p){i||(R(e.$$.fragment,p),i=!0)},o(p){C(e.$$.fragment,p),i=!1},d(p){Z(e,p)}}}function ku(s){let e,t;return e=new Te({props:{label:s[1],tooltip:s[2],$$slots:{default:[bu]},$$scope:{ctx:s}}}),{c(){K(e.$$.fragment)},l(a){Q(e.$$.fragment,a)},m(a,o){X(e,a,o),t=!0},p(a,[o]){const i={};o&2&&(i.label=a[1]),o&4&&(i.tooltip=a[2]),o&129&&(i.$$scope={dirty:o,ctx:a}),e.$set(i)},i(a){t||(R(e.$$.fragment,a),t=!0)},o(a){C(e.$$.fragment,a),t=!1},d(a){Z(e,a)}}}function _u(s,e,t){let{data:a}=e,{name:o=""}=e,{tooltip:i=void 0}=e;const n=Fe();function c(p){s.$$.not_equal(a.selected,p)&&(a.selected=p,t(0,a))}function l(p){s.$$.not_equal(a.value,p)&&(a.value=p,t(0,a))}function u(p){s.$$.not_equal(a.multiple,p)&&(a.multiple=p,t(0,a))}return s.$$set=p=>{"data"in p&&t(0,a=p.data),"name"in p&&t(1,o=p.name),"tooltip"in p&&t(2,i=p.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&a&&n("save")},[a,o,i,c,l,u]}class Iu extends fe{constructor(e){super(),ge(this,e,_u,ku,we,{data:0,name:1,tooltip:2})}}class b extends ke{constructor(t,a,o,i,n=!1){super();r(this,"component",Iu);r(this,"dataSource");r(this,"data",{selected:"",value:[],multiple:!1});r(this,"name","");r(this,"key","");r(this,"tooltip");r(this,"init",()=>{this.dataSource&&(this.data.value=this.dataSource()),!this.data.selected&&this.data.value.length>0&&!this.data.multiple&&(this.data.selected=this.data.value[0])});r(this,"setTooltip",t=>(this.tooltip=t,this));r(this,"clone",()=>new b(this.name,this.key,[...this.data.value],this.data.selected));r(this,"getData",()=>{const t={};return t[this.key]=this.data.selected,t});r(this,"getSummary",()=>this.data.selected instanceof Array?this.data.selected.join(", "):this.data.selected);r(this,"deserialize",t=>this.data.selected=t.get(this.key));this.name=t,this.key=a,typeof o=="function"?this.dataSource=o:this.data.value=o,n&&(this.data.selected=[]),i&&(this.data.selected=i),this.data.multiple=n}}function Au(s){let e,t,a,o;function i(l){s[3](l)}function n(l){s[4](l)}let c={};return s[0].material!==void 0&&(c.selected=s[0].material),s[0].any!==void 0&&(c.any=s[0].any),e=new Yc({props:c}),ue.push(()=>pe(e,"selected",i)),ue.push(()=>pe(e,"any",n)),{c(){K(e.$$.fragment)},l(l){Q(e.$$.fragment,l)},m(l,u){X(e,l,u),o=!0},p(l,u){const p={};!t&&u&1&&(t=!0,p.selected=l[0].material,he(()=>t=!1)),!a&&u&1&&(a=!0,p.any=l[0].any,he(()=>a=!1)),e.$set(p)},i(l){o||(R(e.$$.fragment,l),o=!0)},o(l){C(e.$$.fragment,l),o=!1},d(l){Z(e,l)}}}function Su(s){let e,t;return e=new Te({props:{label:"Material",tooltip:"[material] "+s[1],$$slots:{default:[Au]},$$scope:{ctx:s}}}),{c(){K(e.$$.fragment)},l(a){Q(e.$$.fragment,a)},m(a,o){X(e,a,o),t=!0},p(a,[o]){const i={};o&2&&(i.tooltip="[material] "+a[1]),o&65&&(i.$$scope={dirty:o,ctx:a}),e.$set(i)},i(a){t||(R(e.$$.fragment,a),t=!0)},o(a){C(e.$$.fragment,a),t=!1},d(a){Z(e,a)}}}function Du(s,e,t){let{data:a}=e,{any:o}=e,{tooltip:i=void 0}=e;const n=Fe();function c(u){s.$$.not_equal(a.material,u)&&(a.material=u,t(0,a))}function l(u){s.$$.not_equal(a.any,u)&&(a.any=u,t(0,a))}return s.$$set=u=>{"data"in u&&t(0,a=u.data),"any"in u&&t(2,o=u.any),"tooltip"in u&&t(1,i=u.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&a&&n("save")},[a,i,o,c,l]}class Eu extends fe{constructor(e){super(),ge(this,e,Du,Su,we,{data:0,any:2,tooltip:1})}}class lt extends ke{constructor(t=!0,a){super();r(this,"key","material");r(this,"component",Eu);r(this,"data",{material:"Dirt",any:!1});r(this,"tooltip");r(this,"setTooltip",t=>(this.tooltip=t,this));r(this,"clone",()=>{const t=new lt;return t.data.material=this.data.material,t.data.any=this.data.any,t});r(this,"getData",()=>{const t={};return t.material=this.data.material,t});r(this,"getSummary",()=>this.data.material);r(this,"deserialize",t=>this.data.material=t.get("material","Dirt"));this.data.any=t,a&&(this.data.material=a)}}function $u(s){let e,t,a;function o(n){s[4](n)}let i={};return s[0]!==void 0&&(i.data=s[0]),e=new it({props:i}),ue.push(()=>pe(e,"data",o)),{c(){K(e.$$.fragment)},l(n){Q(e.$$.fragment,n)},m(n,c){X(e,n,c),a=!0},p(n,c){const l={};!t&&c&1&&(t=!0,l.data=n[0],he(()=>t=!1)),e.$set(l)},i(n){a||(R(e.$$.fragment,n),a=!0)},o(n){C(e.$$.fragment,n),a=!1},d(n){Z(e,n)}}}function Pu(s){let e,t;return e=new Te({props:{label:s[1],tooltip:s[2],$$slots:{default:[$u]},$$scope:{ctx:s}}}),{c(){K(e.$$.fragment)},l(a){Q(e.$$.fragment,a)},m(a,o){X(e,a,o),t=!0},p(a,[o]){const i={};o&2&&(i.label=a[1]),o&4&&(i.tooltip=a[2]),o&65&&(i.$$scope={dirty:o,ctx:a}),e.$set(i)},i(a){t||(R(e.$$.fragment,a),t=!0)},o(a){C(e.$$.fragment,a),t=!1},d(a){Z(e,a)}}}function Vu(s,e,t){let{data:a}=e,{any:o}=e,{name:i=""}=e,{tooltip:n=void 0}=e;const c=Fe();function l(u){a=u,t(0,a)}return s.$$set=u=>{"data"in u&&t(0,a=u.data),"any"in u&&t(3,o=u.any),"name"in u&&t(1,i=u.name),"tooltip"in u&&t(2,n=u.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&(a||!a)&&c("save")},[a,i,n,o,l]}class qu extends fe{constructor(e){super(),ge(this,e,Vu,Pu,we,{data:0,any:3,name:1,tooltip:2})}}class I extends ke{constructor(t,a,o=!1){super();r(this,"component",qu);r(this,"name");r(this,"key");r(this,"data");r(this,"tooltip");r(this,"setTooltip",t=>(this.tooltip=t,this));r(this,"clone",()=>new I(this.name,this.key,this.data));r(this,"getData",()=>{const t={};return t[this.key]=!!this.data,t});r(this,"getSummary",()=>this.data?"true":"");r(this,"deserialize",t=>this.data=t.get(this.key,!1));this.name=t,this.key=a,this.data=o}}function Ou(s){let e,t,a;function o(n){s[3](n)}let i={label:s[1],tooltip:s[2],type:"number",placeholder:"0"};return s[0]!==void 0&&(i.value=s[0]),e=new Te({props:i}),ue.push(()=>pe(e,"value",o)),{c(){K(e.$$.fragment)},l(n){Q(e.$$.fragment,n)},m(n,c){X(e,n,c),a=!0},p(n,[c]){const l={};c&2&&(l.label=n[1]),c&4&&(l.tooltip=n[2]),!t&&c&1&&(t=!0,l.value=n[0],he(()=>t=!1)),e.$set(l)},i(n){a||(R(e.$$.fragment,n),a=!0)},o(n){C(e.$$.fragment,n),a=!1},d(n){Z(e,n)}}}function Lu(s,e,t){let{data:a}=e,{name:o=""}=e,{tooltip:i=void 0}=e;const n=Fe();function c(l){a=l,t(0,a)}return s.$$set=l=>{"data"in l&&t(0,a=l.data),"name"in l&&t(1,o=l.name),"tooltip"in l&&t(2,i=l.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&(a||!a)&&n("save")},[a,o,i,c]}class Fu extends fe{constructor(e){super(),ge(this,e,Lu,Ou,we,{data:0,name:1,tooltip:2})}}class x extends ke{constructor(t,a,o=0){super();r(this,"component",Fu);r(this,"name");r(this,"key");r(this,"data");r(this,"tooltip");r(this,"setTooltip",t=>(this.tooltip=t,this));r(this,"clone",()=>new x(this.name,this.key,this.data));r(this,"getData",()=>{const t={};return t[this.key]=this.data||0,t});r(this,"getSummary",()=>this.data.toString());r(this,"deserialize",t=>this.data=t.get(this.key,0));this.name=t,this.key=a,this.data=o}}function Ru(s){let e,t,a;function o(n){s[3](n)}let i={};return s[0].value!==void 0&&(i.value=s[0].value),e=new Kc({props:i}),ue.push(()=>pe(e,"value",o)),{c(){K(e.$$.fragment)},l(n){Q(e.$$.fragment,n)},m(n,c){X(e,n,c),a=!0},p(n,c){const l={};!t&&c&1&&(t=!0,l.value=n[0].value,he(()=>t=!1)),e.$set(l)},i(n){a||(R(e.$$.fragment,n),a=!0)},o(n){C(e.$$.fragment,n),a=!1},d(n){Z(e,n)}}}function Nu(s){let e,t;return e=new Te({props:{label:s[1],tooltip:s[2],$$slots:{default:[Ru]},$$scope:{ctx:s}}}),{c(){K(e.$$.fragment)},l(a){Q(e.$$.fragment,a)},m(a,o){X(e,a,o),t=!0},p(a,[o]){const i={};o&2&&(i.label=a[1]),o&4&&(i.tooltip=a[2]),o&33&&(i.$$scope={dirty:o,ctx:a}),e.$set(i)},i(a){t||(R(e.$$.fragment,a),t=!0)},o(a){C(e.$$.fragment,a),t=!1},d(a){Z(e,a)}}}function xu(s,e,t){let{data:a}=e,{name:o=""}=e,{tooltip:i=void 0}=e;const n=Fe();function c(l){s.$$.not_equal(a.value,l)&&(a.value=l,t(0,a))}return s.$$set=l=>{"data"in l&&t(0,a=l.data),"name"in l&&t(1,o=l.name),"tooltip"in l&&t(2,i=l.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&a&&n("save")},[a,o,i,c]}class Cu extends fe{constructor(e){super(),ge(this,e,xu,Nu,we,{data:0,name:1,tooltip:2})}}class Ve extends ke{constructor(t,a,o){super();r(this,"component",Cu);r(this,"data",{value:[]});r(this,"name","");r(this,"key","");r(this,"tooltip");r(this,"setTooltip",t=>(this.tooltip=t,this));r(this,"clone",()=>new Ve(this.name,this.key,[...this.data.value]));r(this,"getData",()=>{const t={};return t[this.key]=this.data.value,t});r(this,"getSummary",()=>this.data.value.join(", "));r(this,"deserialize",t=>{this.data.value=t.get(this.key)});this.name=t,this.key=a,this.data.value=o||[]}}function Hu(s){let e,t,a,o;return{c(){e=D("div"),t=M(s[0]),a=B(),o=D("hr"),this.h()},l(i){e=E(i,"DIV",{class:!0});var n=q(e);t=ee(n,s[0]),a=U(n),o=E(n,"HR",{class:!0}),n.forEach(y),this.h()},h(){v(o,"class","svelte-x2dop6"),v(e,"class","svelte-x2dop6")},m(i,n){Y(i,e,n),f(e,t),f(e,a),f(e,o)},p(i,[n]){n&1&&Ye(t,i[0])},i:Pe,o:Pe,d(i){i&&y(e)}}}function Wu(s,e,t){let{data:a}=e;return s.$$set=o=>{"data"in o&&t(0,a=o.data)},s.$$.update=()=>{s.$$.dirty&1&&console.log(a)},[a]}class Bu extends fe{constructor(e){super(),ge(this,e,Wu,Hu,we,{data:0})}}class re extends ke{constructor(t){super();r(this,"key","section-marker");r(this,"component",Bu);r(this,"data");r(this,"setTooltip",t=>this);r(this,"clone",()=>new re(this.data));r(this,"getData",()=>({}));r(this,"getSummary",()=>this.data);r(this,"deserialize",t=>{});this.data=t}}class N extends ke{constructor(t,a,o=""){super();r(this,"component",Bc);r(this,"name");r(this,"key");r(this,"data");r(this,"tooltip");r(this,"setTooltip",t=>(this.tooltip=t,this));r(this,"clone",()=>new N(this.name,this.key,this.data));r(this,"getData",()=>{const t={};return t[this.key]=this.data||"",t});r(this,"getSummary",()=>this.data);r(this,"deserialize",t=>this.data=t.get(this.key,""));this.name=t,this.key=a,this.data=o}}function Uu(s){let e,t,a,o;function i(l){s[6](l)}function n(l){s[7](l)}let c={display:ju,multiple:s[3]};return s[4]!==void 0&&(c.data=s[4]),s[0]!==void 0&&(c.selected=s[0]),e=new $o({props:c}),ue.push(()=>pe(e,"data",i)),ue.push(()=>pe(e,"selected",n)),{c(){K(e.$$.fragment)},l(l){Q(e.$$.fragment,l)},m(l,u){X(e,l,u),o=!0},p(l,u){const p={};u&8&&(p.multiple=l[3]),!t&&u&16&&(t=!0,p.data=l[4],he(()=>t=!1)),!a&&u&1&&(a=!0,p.selected=l[0],he(()=>a=!1)),e.$set(p)},i(l){o||(R(e.$$.fragment,l),o=!0)},o(l){C(e.$$.fragment,l),o=!1},d(l){Z(e,l)}}}function Gu(s){let e,t;return e=new Te({props:{label:s[1],tooltip:s[2],$$slots:{default:[Uu]},$$scope:{ctx:s}}}),{c(){K(e.$$.fragment)},l(a){Q(e.$$.fragment,a)},m(a,o){X(e,a,o),t=!0},p(a,[o]){const i={};o&2&&(i.label=a[1]),o&4&&(i.tooltip=a[2]),o&537&&(i.$$scope={dirty:o,ctx:a}),e.$set(i)},i(a){t||(R(e.$$.fragment,a),t=!0)},o(a){C(e.$$.fragment,a),t=!1},d(a){Z(e,a)}}}const ju=s=>s.name;function zu(s,e,t){let a;de(s,mt,w=>t(4,a=w));let{data:o=[]}=e,{any:i}=e,{name:n=""}=e,{tooltip:c=void 0}=e,{multiple:l=!0}=e;const u=Fe();function p(w){a=w,mt.set(a)}function m(w){o=w,t(0,o)}return s.$$set=w=>{"data"in w&&t(0,o=w.data),"any"in w&&t(5,i=w.any),"name"in w&&t(1,n=w.name),"tooltip"in w&&t(2,c=w.tooltip),"multiple"in w&&t(3,l=w.multiple)},s.$$.update=()=>{if(s.$$.dirty&1){if(o instanceof Array)t(0,o=o.map(w=>{if(w instanceof Be)return w;const A=fr(w);if(A)return A})),u("save");else if(o&&!(o instanceof Be)){console.log("data is string");const w=fr(o);w&&t(0,o=w)}}s.$$.dirty&1&&(o instanceof Array||u("save"))},[o,n,c,l,a,i,p,m]}class Yu extends fe{constructor(e){super(),ge(this,e,zu,Gu,we,{data:0,any:5,name:1,tooltip:2,multiple:3})}}class or extends ke{constructor(t,a,o=!0){super();r(this,"component",Yu);r(this,"name");r(this,"key");r(this,"data",[]);r(this,"tooltip");r(this,"multiple",!0);r(this,"setTooltip",t=>(this.tooltip=t,this));r(this,"clone",()=>{const t=new or(this.name,this.key);return t.data=this.data,t});r(this,"getData",()=>{const t={};return this.data instanceof Array?t[this.key]=this.data.map(a=>a instanceof Be?a.name:a):t[this.key]=this.data instanceof Be?this.data.name:this.data,t});r(this,"getSummary",()=>this.data instanceof Array?this.data.map(t=>t instanceof Be?t.name:t).join(", "):this.data instanceof Be?this.data.name:this.data);r(this,"deserialize",t=>{this.data=t.get(this.key,this.multiple?[]:"")});this.name=t,this.key=a,this.multiple=o}}function Ku(s){let e,t,a,o;function i(l){s[6](l)}function n(l){s[7](l)}let c={display:Zu,multiple:s[3]};return s[4]!==void 0&&(c.data=s[4]),s[0]!==void 0&&(c.selected=s[0]),e=new $o({props:c}),ue.push(()=>pe(e,"data",i)),ue.push(()=>pe(e,"selected",n)),{c(){K(e.$$.fragment)},l(l){Q(e.$$.fragment,l)},m(l,u){X(e,l,u),o=!0},p(l,u){const p={};u&8&&(p.multiple=l[3]),!t&&u&16&&(t=!0,p.data=l[4],he(()=>t=!1)),!a&&u&1&&(a=!0,p.selected=l[0],he(()=>a=!1)),e.$set(p)},i(l){o||(R(e.$$.fragment,l),o=!0)},o(l){C(e.$$.fragment,l),o=!1},d(l){Z(e,l)}}}function Xu(s){let e,t;return e=new Te({props:{label:s[1],tooltip:s[2],$$slots:{default:[Ku]},$$scope:{ctx:s}}}),{c(){K(e.$$.fragment)},l(a){Q(e.$$.fragment,a)},m(a,o){X(e,a,o),t=!0},p(a,[o]){const i={};o&2&&(i.label=a[1]),o&4&&(i.tooltip=a[2]),o&537&&(i.$$scope={dirty:o,ctx:a}),e.$set(i)},i(a){t||(R(e.$$.fragment,a),t=!0)},o(a){C(e.$$.fragment,a),t=!1},d(a){Z(e,a)}}}const Zu=s=>s.name||"";function Ju(s,e,t){let a;de(s,Qe,w=>t(4,a=w));let{data:o=[]}=e,{any:i}=e,{name:n=""}=e,{tooltip:c=void 0}=e,{multiple:l=!0}=e;const u=Fe();function p(w){a=w,Qe.set(a)}function m(w){o=w,t(0,o),t(3,l)}return s.$$set=w=>{"data"in w&&t(0,o=w.data),"any"in w&&t(5,i=w.any),"name"in w&&t(1,n=w.name),"tooltip"in w&&t(2,c=w.tooltip),"multiple"in w&&t(3,l=w.multiple)},s.$$.update=()=>{if(s.$$.dirty&9&&!l&&o.length===0&&t(0,o=""),s.$$.dirty&1){if(o instanceof Array)t(0,o=o.map(w=>{if(w instanceof Ne)return w;const A=gr(w);if(A)return A})),u("save");else if(o&&!(o instanceof Ne)){const w=gr(o);w&&t(0,o=w)}}},[o,n,c,l,a,i,p,m]}class Qu extends fe{constructor(e){super(),ge(this,e,Ju,Xu,we,{data:0,any:5,name:1,tooltip:2,multiple:3})}}class Vo extends ke{constructor(t,a,o=!0){super();r(this,"component",Qu);r(this,"name");r(this,"key");r(this,"data",[]);r(this,"tooltip");r(this,"multiple",!0);r(this,"setTooltip",t=>(this.tooltip=t,this));r(this,"clone",()=>{const t=new Vo(this.name,this.key);return t.data=this.data,t});r(this,"getData",()=>{const t={};return this.data instanceof Array?t[this.key]=this.data.map(a=>a instanceof Ne?a.name:a):t[this.key]=this.data instanceof Ne?this.data.name:this.data,t});r(this,"getSummary",()=>this.data instanceof Array?this.data.map(t=>t instanceof Ne?t.name:t).join(", "):this.data instanceof Ne?this.data.name:this.data);r(this,"deserialize",t=>{this.data=t.get(this.key,this.multiple?[]:"")});this.name=t,this.key=a,this.multiple=o}}function Mu(s){let e,t,a;function o(n){s[3](n)}let i={label:s[1],tooltip:s[2],type:"number",intMode:!0,placeholder:"0"};return s[0]!==void 0&&(i.value=s[0]),e=new Te({props:i}),ue.push(()=>pe(e,"value",o)),{c(){K(e.$$.fragment)},l(n){Q(e.$$.fragment,n)},m(n,c){X(e,n,c),a=!0},p(n,[c]){const l={};c&2&&(l.label=n[1]),c&4&&(l.tooltip=n[2]),!t&&c&1&&(t=!0,l.value=n[0],he(()=>t=!1)),e.$set(l)},i(n){a||(R(e.$$.fragment,n),a=!0)},o(n){C(e.$$.fragment,n),a=!1},d(n){Z(e,n)}}}function ep(s,e,t){let{data:a}=e,{name:o=""}=e,{tooltip:i=void 0}=e;const n=Fe();function c(l){a=l,t(0,a)}return s.$$set=l=>{"data"in l&&t(0,a=l.data),"name"in l&&t(1,o=l.name),"tooltip"in l&&t(2,i=l.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&(a||!a)&&n("save")},[a,o,i,c]}class tp extends fe{constructor(e){super(),ge(this,e,ep,Mu,we,{data:0,name:1,tooltip:2})}}class ae extends ke{constructor(t,a,o=0){super();r(this,"component",tp);r(this,"name");r(this,"key");r(this,"data");r(this,"tooltip");r(this,"setTooltip",t=>(this.tooltip=t,this));r(this,"clone",()=>new ae(this.name,this.key,this.data));r(this,"getData",()=>{const t={};return t[this.key]=this.data||0,t});r(this,"getSummary",()=>this.data.toString());r(this,"deserialize",t=>this.data=t.get(this.key,0));this.name=t,this.key=a,this.data=o}}function ap(s){let e,t,a,o,i,n;return{c(){e=D("div"),t=D("input"),a=B(),o=D("input"),this.h()},l(c){e=E(c,"DIV",{class:!0});var l=q(e);t=E(l,"INPUT",{class:!0}),a=U(l),o=E(l,"INPUT",{type:!0,class:!0}),l.forEach(y),this.h()},h(){v(t,"class","text svelte-1ncbyp2"),v(o,"type","color"),v(o,"class","svelte-1ncbyp2"),v(e,"class","wrap svelte-1ncbyp2")},m(c,l){Y(c,e,l),f(e,t),Xe(t,s[0]),f(e,a),f(e,o),Xe(o,s[0]),i||(n=[J(t,"input",s[3]),J(o,"input",s[4])],i=!0)},p(c,l){l&1&&t.value!==c[0]&&Xe(t,c[0]),l&1&&Xe(o,c[0])},d(c){c&&y(e),i=!1,Re(n)}}}function sp(s){let e,t;return e=new Te({props:{label:s[1],tooltip:s[2],$$slots:{default:[ap]},$$scope:{ctx:s}}}),{c(){K(e.$$.fragment)},l(a){Q(e.$$.fragment,a)},m(a,o){X(e,a,o),t=!0},p(a,[o]){const i={};o&2&&(i.label=a[1]),o&4&&(i.tooltip=a[2]),o&65&&(i.$$scope={dirty:o,ctx:a}),e.$set(i)},i(a){t||(R(e.$$.fragment,a),t=!0)},o(a){C(e.$$.fragment,a),t=!1},d(a){Z(e,a)}}}function op(s,e,t){let{data:a}=e,{name:o=""}=e,{tooltip:i=void 0}=e;const n=Fe();function c(){a=this.value,t(0,a)}function l(){a=this.value,t(0,a)}return s.$$set=u=>{"data"in u&&t(0,a=u.data),"name"in u&&t(1,o=u.name),"tooltip"in u&&t(2,i=u.tooltip)},s.$$.update=()=>{s.$$.dirty&1&&(a||!a)&&n("save")},[a,o,i,c,l]}class np extends fe{constructor(e){super(),ge(this,e,op,sp,we,{data:0,name:1,tooltip:2})}}class Oe extends ke{constructor(t,a,o="#12cfab"){super();r(this,"component",np);r(this,"name");r(this,"key");r(this,"data");r(this,"tooltip");r(this,"setTooltip",t=>(this.tooltip=t,this));r(this,"clone",()=>new Oe(this.name,this.key,this.data));r(this,"getData",()=>{const t={};return t[this.key]=this.data||0,t});r(this,"getSummary",()=>this.data);r(this,"deserialize",t=>this.data=t.get(this.key,"#12cfab"));this.name=t,this.key=a,this.data=o}}const gt=class gt extends ne{constructor(){super({name:"Armor Equip",description:"Applies skill effects when a player equips a new item in an armor or hand slot",data:[new b("Slots","slots",["Any","Helmet","Chestplate","Leggings","Boots","Main hand","Offhand"],["Any"],!0).setTooltip("The armor slots to check for")],summaryItems:["slots"]})}};r(gt,"new",()=>new gt);let Wo=gt;const wt=class wt extends ne{constructor(){super({name:"Block Break",description:"Applies skill effects when a player breaks a block matching the given details",data:[new Po("The type of block expected to be broken","The expected data value of the block (-1 for any data value)")],summaryItems:["block"]})}};r(wt,"new",()=>new wt);let Bo=wt;const yt=class yt extends ne{constructor(){super({name:"Block Place",description:"Applies skill effects when a player places a block matching the given details",data:[new Po("The type of block expected to be placed","The expected data value of the block (-1 for any data value)")],summaryItems:["block"]})}};r(yt,"new",()=>new yt);let Uo=yt;const Tt=class Tt extends ne{constructor(){super({name:"Cast",description:"Applies skill effects when a player casts the skill using either the cast command, the skill bar, or click combos"})}};r(Tt,"new",()=>new Tt);let Go=Tt;const vt=class vt extends ne{constructor(){super({name:"Chat",description:"Applies skill effects when a player sends a chat message in the specified format",data:[new I("Cancel","cancel",!1).setTooltip("Whether to cancel message or not"),new I("Regex","regex",!1).setTooltip("Whether to use format value as regex or check if message contains format value"),new N("Format","format","").setTooltip("Format of message (if message contains format or regex)")],summaryItems:["format","cancel"]})}};r(vt,"new",()=>new vt);let jo=vt;const bt=class bt extends ne{constructor(){super({name:"Cleanup",description:"Applies skill effects when the player disconnects or unlearns the skill. This is always applied with a skill level of 1 just for the sake of math"})}};r(bt,"new",()=>new bt);let zo=bt;const kt=class kt extends ne{constructor(){super({name:"Crouch",description:"Applies skill effects when a player starts or stops crouching using the shift key",data:[new b("Crouching","type",["Start Crouching","Stop Crouching","Both"])],summaryItems:["type"]})}};r(kt,"new",()=>new kt);let Yo=kt;const _t=class _t extends ne{constructor(){super({name:"Death",description:"Applies skill effects when a player dies"})}};r(_t,"new",()=>new _t);let Ko=_t;const It=class It extends ne{constructor(){super({name:"Drop Item",description:"Applies skill effects upon dropping an item",data:[new b("Drop multiple","drop multiple",["True","False","Ignore"],"Ignore").setTooltip("Whether the player has to drop multiple items or a single item")],summaryItems:["drop multiple"]})}};r(It,"new",()=>new It);let Xo=It;const At=class At extends ne{constructor(){super({name:"Environment Damage",description:"Applies skill effects when a player takes environmental damage",data:[new b("Type","type",tr,"Fall").setTooltip("The source of damage to apply for")],summaryItems:["type"]})}};r(At,"new",()=>new At);let Zo=At;const St=class St extends ne{constructor(){super({name:"Fishing",description:"Applies skill effects upon right-clicking with a fishing rod"})}};r(St,"new",()=>new St);let Jo=St;const Dt=class Dt extends ne{constructor(){super({name:"Fishing Bite",description:"Applies skill effects when a fish bites the fishing rod of a player"})}};r(Dt,"new",()=>new Dt);let Qo=Dt;const Et=class Et extends ne{constructor(){super({name:"Fishing Fail",description:"Applies skill effects when a player fails to catch a fish due to poor timing"})}};r(Et,"new",()=>new Et);let Mo=Et;const $t=class $t extends ne{constructor(){super({name:"Fishing Grab",description:"Applies skill effects when a player catches a fish"})}};r($t,"new",()=>new $t);let en=$t;const Pt=class Pt extends ne{constructor(){super({name:"Fishing Ground",description:"Applies skill effects when the bobber of a fishing rod hits the ground"})}};r(Pt,"new",()=>new Pt);let tn=Pt;const Vt=class Vt extends ne{constructor(){super({name:"Fishing Reel",description:"Applies skill effects when a player reels in a fishing rod out of water or air with no fish on the rod"})}};r(Vt,"new",()=>new Vt);let an=Vt;const qt=class qt extends ne{constructor(){super({name:"Initialize",description:"Applies skill effects immediately. This can be used for passive abilities"})}};r(qt,"new",()=>new qt);let sn=qt;const Ot=class Ot extends ne{constructor(){super({name:"Item Swap",description:"Applies skill effects upon pressing the swap-key on your keyboard",data:[new I("Cancel Swap","cancel",!0).setTooltip("True cancels the item swap. False allows the item swap")],summaryItems:["cancel"]})}};r(Ot,"new",()=>new Ot);let on=Ot;const Lt=class Lt extends ne{constructor(){super({name:"Kill",description:"Applies skill effects upon killing something",data:[new I("Target Caster","target",!0).setTooltip("True makes children target the caster. False makes children target the attacking entity")]})}};r(Lt,"new",()=>new Lt);let nn=Lt;const Ft=class Ft extends ne{constructor(){super({name:"Land",description:"Applies skill effects when a player lands on the ground",data:[new x("Min Distance","min-distance").setTooltip("The minimum distance the player should fall before effects activate")],summaryItems:["min-distance"]})}};r(Ft,"new",()=>new Ft);let ln=Ft;const Rt=class Rt extends ne{constructor(){super({name:"Launch",description:"Applies skill effects when a player launches a projectile",data:[new b("Type","type",Eo,"Any").setTooltip("The type of projectile that should be launched")],summaryItems:["type"]})}};r(Rt,"new",()=>new Rt);let rn=Rt;const Nt=class Nt extends ne{constructor(){super({name:"Left Click",description:"Applies skill effects upon performing a left-click",data:[new b("Crouch","crouch",["Crouch","Dont crouch","Both"],"Crouch").setTooltip("If the player has to be crouching in order for this trigger to function")],summaryItems:["crouch"]})}};r(Nt,"new",()=>new Nt);let cn=Nt;const xt=class xt extends ne{constructor(){super({name:"Move",description:"Applies skill effects when a player moves around. This triggers every tick the player is moving, so use this sparingly. Use the 'api-moved' value to check/use the distance traveled"})}};r(xt,"new",()=>new xt);let un=xt;const Ct=class Ct extends ne{constructor(){super({name:"Physical Damage",description:"Applies skill effects when a player deals physical (or non-skill) damage. This includes melee attacks and firing a bow",data:[new I("Target Caster","target",!0).setTooltip("True makes the children target the caster. False makes children target the damaged entity"),new b("Type","type",["Both","Melee","Projectile"],"Both").setTooltip("The type of damage dealt"),new x("Min Damage","dmg-min",0).setTooltip("The minimum damage that needs to be dealt"),new x("Max Damage","dmg-max",999).setTooltip("The minimum damage that needs to be dealt")],summaryItems:["type","dmg-min","dmg-max"]})}};r(Ct,"new",()=>new Ct);let pn=Ct;const Ht=class Ht extends ne{constructor(){super({name:"Projectile Hit",description:"Applies skill effects when a projectile hits a block/entity",data:[new I("Target Caster","target",!0).setTooltip("True makes the children target the caster. False makes children target the damaged entity"),new b("Type","type",["Both","Entity","Block"],"Both").setTooltip("The type of what projectile hits"),new b("Projectile","projectile",Eo,["Any"],!0).setTooltip("The type of projectile shot")],summaryItems:["type","projectile"]})}};r(Ht,"new",()=>new Ht);let hn=Ht;const Wt=class Wt extends ne{constructor(){super({name:"Projectile Tick",description:"Applies skill effects every interval while a projectile is in the air",data:[new I("Target Caster","target",!0).setTooltip("True makes the children target the caster. False makes children target the damaged entity"),new ae("Interval","interval",1).setTooltip("Interval between trigger executions"),new ae("Delay","delay",0).setTooltip("Delay before executing trigger for the first time"),new b("Projectile","projectile",Eo,["Any"],!0).setTooltip("The type of projectile shot")],summaryItems:["interval","delay","projectile"]})}};r(Wt,"new",()=>new Wt);let mn=Wt;const Bt=class Bt extends ne{constructor(){super({name:"Right Click",description:"Applies skill effects upon performing a right-click (NOTE: When clicking in air, you have to have an item in your hand)",data:[new b("Crouch","crouch",["Crouch","Dont crouch","Both"],"Crouch").setTooltip("If the player has to be crouching in order for this trigger to function")],summaryItems:["crouch"]})}};r(Bt,"new",()=>new Bt);let dn=Bt;const Ut=class Ut extends ne{constructor(){super({name:"Skill Cast",description:"Applies skill effects when a player casts a skill",data:[new I("Cancel Cast","cancel",!1).setTooltip("True cancels the skill cast. False allows the skill cast"),new Ve("Classes","allowed-classes").setTooltip("The list of classes which will trigger this effect. Leave blank to allow all to trigger. Use '!xxx' to exclude"),new Ve("Skills","allowed-skills").setTooltip("The list of skills which will trigger this effect. Leave blank to allow all to trigger. Use '!xxx' to exclude")],summaryItems:["cancel","allowed-classes","allowed-skills"]})}};r(Ut,"new",()=>new Ut);let fn=Ut;const Gt=class Gt extends ne{constructor(){super({name:"Skill Damage",description:"Applies skill effects when a player deals damage with a skill",data:[new I("Target Caster","target",!0).setTooltip("True makes children target the caster. False makes children target the damaged entity"),new x("Min Damage","dmg-min",0).setTooltip("The minimum damage that needs to be dealt"),new x("Max Damage","dmg-max",999).setTooltip("The maximum damage that needs to be dealt"),new Ve("Category","category",["default"]).setTooltip("The type of skill damage to apply for. Leave this empty to apply to all skill damage")],summaryItems:["dmg-min","dmg-max","category"]})}};r(Gt,"new",()=>new Gt);let gn=Gt;const jt=class jt extends ne{constructor(){super({name:"Took Physical Damage",description:"Applies skill effects when a player takes physical (or non-skill) damage. This includes melee attacks and projectiles not fired by a skill",data:[new I("Target Caster","target",!0).setTooltip("True makes children target the caster. False makes children target the attacking entity"),new b("Type","type",["Both","Melee","Projectile"],"Both").setTooltip("The type of damage dealt"),new x("Min Damage","dmg-min",0).setTooltip("The minimum damage that needs to be dealt"),new x("Max Damage","dmg-max",999).setTooltip("The maximum damage that needs to be dealt")],summaryItems:["type","dmg-min","dmg-max"]})}};r(jt,"new",()=>new jt);let wn=jt;const zt=class zt extends ne{constructor(){super({name:"Took Skill Damage",description:"Applies skill effects when a player takes damage from a skill other than their own",data:[new I("Target Caster","target",!0).setTooltip("True makes children target the caster. False makes children target the attacking entity"),new x("Min Damage","dmg-min",0).setTooltip("The minimum damage that needs to be dealt"),new x("Max Damage","dmg-max",999).setTooltip("The maximum damage that needs to be dealt"),new Ve("Category","category",["default"]).setTooltip("The type of skill damage to apply for. Leave this empty to apply to all skill damage")],summaryItems:["dmg-min","dmg-max","category"]})}};r(zt,"new",()=>new zt);let yn=zt;const Yt=class Yt extends ne{constructor(){super({name:"Consume",description:"Applies skill effects when a player consumes an item",data:[new b("Material","material",bc,"Any").setTooltip("The type of item that the player has consumed."),new b("Potion","potion",tc,"Any").requireValue("material",["Potion"]).setTooltip("The type of potion effect to apply")],summaryItems:["material","potion"]})}};r(Yt,"new",()=>new Yt);let Tn=Yt;const Kt=class Kt extends ne{constructor(){super({name:"Heal",description:"Applies skill effects when the player receives heal from any source. Use {api-heal} to get heal value",data:[new x("Min Heal","heal-min",0).setTooltip("The minimum health that needs to be received"),new x("Max Heal","heal-max",999).setTooltip("The maximum health that needs to be received")],summaryItems:["heal-min","heal-max"]})}};r(Kt,"new",()=>new Kt);let vn=Kt;const Xt=class Xt extends ne{constructor(){super({name:"Shield",description:"Applies skill effects when the player blocks damage with their shield. Use {api-blocked} to get amount of blocked damage.",data:[new I("Target Caster","target",!0).setTooltip("True makes children target the caster. False makes children target the attacking entity"),new b("Type","type",["Both","Melee","Projectile"],"Both").setTooltip("The type of damage dealt"),new x("Damage Heal","dmg-min",0).setTooltip("The minimum damage that needs to be blocked"),new x("Damage Heal","dmg-max",999).setTooltip("The maximum damage that needs to be blocked")],summaryItems:["type","dmg-min","dmg-max"]})}};r(Xt,"new",()=>new Xt);let bn=Xt;const Zt=class Zt extends ne{constructor(){super({name:"Signal",description:"Applies skill effects when the player receive a signal emitted from Signal Emit mechanic.",data:[new I("Target Receiver","target",!0).setTooltip("True makes children target the receiver. False makes children target the emitter"),new N("Signal","signal").setTooltip("Name of signal want to receive.")],summaryItems:["target","signal"]})}};r(Zt,"new",()=>new Zt);let kn=Zt;const qo=()=>[new b("Group","group",["Ally","Enemy","Both"],"Enemy").setTooltip("The alignment of targets to get"),new I("Through Wall","wall",!1).setTooltip("Whether to allow targets to be on the other side of a wall"),new b("Include Caster","caster",["True","False","In area"],"False").setTooltip('Whether to include the caster in the target list. "True" will always include them, "False" will never, and "In area" will only if they are within the targeted area'),new g("Max Targets","max",99).setTooltip("The max amount of targets to apply children to")],_e=()=>[new re("Particles at target"),new I("Particles at target","per-target",!1).setTooltip("Displays particles at the location of the current targets"),...Le("per-target"),new b("Arrangement","per-target-arrangement",["Sphere","Circle","Hemisphere"],"Sphere").requireValue("per-target",[!0]).setTooltip("The arrangement to use for the particles. Circle is a 2D circle, Hemisphere is half a 3D sphere, and Sphere is a 3D sphere"),new b("Circle Direction","per-target-direction",["XY","XZ","YZ"],"XZ").requireValue("per-target-arrangement",["Circle"]).requireValue("per-target",[!0]).setTooltip("The orientation of the circle. XY and YZ are vertical circles while XZ is a horizontal circle"),new g("Radius","per-target-radius",.5).requireValue("per-target",[!0]).setTooltip("The radius of the arrangement in blocks"),new I("Increase size by hitbox","per-target-hitbox",!0).requireValue("per-target",[!0]).setTooltip("Increases the 'radius' parameter by the size of the target's hitbox"),new g("Points","per-target-particles",20).requireValue("per-target",[!0]).setTooltip("The amount of points that conform the chosen arrangement")],Jt=class Jt extends Ce{constructor(){super({name:"Area",description:"Targets all units in a radius from the current target (the casting player is the default target)",data:[new g("Radius","radius",3).setTooltip("The radius of the area to target in blocks"),...qo(),new I("Random","random",!1).setTooltip("Whether to randomize the targets selected")],preview:[..._e(),new re("Circle Preview"),new I("Circle Preview","circle",!1).setTooltip("Displays particles as a circle around the targeted area"),new x("Density","circle-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("circle",[!0]),...Le("circle"),new re("Sphere Preview"),new I("Sphere Preview","sphere",!1).setTooltip("Displays particles as a sphere around the targeted area"),new x("Density","sphere-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("sphere",[!0]),...Le("sphere")],summaryItems:["radius","group","wall","caster","max","random"]})}};r(Jt,"new",()=>new Jt);let _n=Jt;const Qt=class Qt extends Ce{constructor(){super({name:"Cone",description:"Targets all units in a line in front of the current target (the casting player is the default target). If you include the caster, that counts towards the max amount",data:[new g("Range","range",5).setTooltip("The max distance away any target can be in blocks"),new g("Angle","angle",90).setTooltip("The angle of the cone arc in degrees"),...qo()],preview:[..._e(),new re("Triangle Preview"),new I("Triangle Preview","triangle",!1).setTooltip("Displays particles as a two lines on both sides around the targeted area"),new x("Density","triangle-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("triangle",[!0]),new x("Start distance","triangle-start-distance",2).setTooltip("How far from the target's face to start drawing the preview, in meters").requireValue("triangle",[!0]),...Le("triangle"),new re("Cone Preview"),new I("Cone Preview","cone",!1).setTooltip("Displays particles as a cone around the targeted area"),new x("Density","cone-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("cone",[!0]),new x("Start distance","cone-start-distance",2).setTooltip("How far from the target's face to start drawing the preview, in meters").requireValue("cone",[!0]),...Le("cone")],summaryItems:["range","angle","group","wall","caster","max"]})}};r(Qt,"new",()=>new Qt);let In=Qt;const Mt=class Mt extends Ce{constructor(){super({name:"Linear",description:"Targets all units in a line in front of the current target (the casting player is the default target)",data:[new g("Range","range",5).setTooltip("The max distance away any target can be in blocks"),new g("Tolerance","tolerance").setTooltip("How much to expand the potential entity's hit-box in all directions, in blocks. This makes it easier to aim"),...qo()],preview:[..._e(),new re("Line Preview"),new I("Line Preview","line",!1).setTooltip("Displays particles as a line of particles in front of the caster"),new x("Density","line-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("line",[!0]),new x("Start distance","line-start-distance",2).setTooltip("How far from the target's face to start drawing the preview, in meters").requireValue("line",[!0]),...Le("line"),new re("Cylinder Preview"),new I("Cylinder Preview","cylinder",!1).setTooltip("Displays particles as a cylinder of particles in front of the caster, showing the component's tolerance"),new x("Density","cylinder-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("cylinder",[!0]),new x("Start distance","cylinder-start-distance",2).setTooltip("How far from the target's face to start drawing the preview, in meters").requireValue("cylinder",[!0]),...Le("cylinder")],summaryItems:["range","tolerance","group","wall","caster","max"]})}};r(Mt,"new",()=>new Mt);let An=Mt;const ea=class ea extends Ce{constructor(){super({name:"Location",description:"Targets the location the target or caster is looking at. Combine this with another targeting type for ranged area effects",data:[new g("Range","range",5).setTooltip("The max distance the location can be from the target's eyes"),new I("Entities","entities",!0).setTooltip("True to account for entities, or false to pass through them"),new I("Fluids","fluids",!1).setTooltip("True to account for fluids (water and lava), or false to pass through them"),new I("Passable blocks","passable",!0).setTooltip("True to account for passable or non-collidable blocks (grass, saplings, etc), or false to pass through them"),new I("Center","center",!1).setTooltip("Whether to move the hit location to the center of the block")],preview:[..._e()],summaryItems:["range","entities","fluids","passable"]})}};r(ea,"new",()=>new ea);let Sn=ea;const ta=class ta extends Ce{constructor(){super({name:"Nearest",description:"Targets the closest unit(s) in a radius from the current target (the casting player is the default target). If you include the caster, that counts towards the max number",data:[new g("Range","range",3).setTooltip("The radius of the area to target in blocks"),...qo()],preview:[..._e(),new re("Circle Preview"),new I("Circle Preview","circle",!1).setTooltip("Displays particles as a circle around the targeted area"),new x("Density","circle-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("circle",[!0]),...Le("circle"),new re("Sphere Preview"),new I("Sphere Preview","sphere",!1).setTooltip("Displays particles as a sphere around the targeted area"),new x("Density","sphere-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("sphere",[!0]),...Le("sphere")],summaryItems:["range","group","wall","caster","max"]})}};r(ta,"new",()=>new ta);let Dn=ta;const aa=class aa extends Ce{constructor(){super({name:"Offset",description:"Targets a location that is the given offset away from each target",data:[new re("Offset"),new g("Forward","forward").setTooltip("The offset from the target in the direction they are facing. Negative numbers go backwards"),new g("Upward","upward",2,.5).setTooltip("The offset from the target upwards. Negative numbers go below them"),new g("Right","right").setTooltip("The offset from the target to their right. Negative numbers go to the left")],preview:[..._e()],summaryItems:["forward","upward","right"]})}};r(aa,"new",()=>new aa);let En=aa;const sa=class sa extends Ce{constructor(){super({name:"Remember",description:'Targets entities stored using the "Remember Targets" mechanic for the matching key. If it was never set, this will fail',data:[new N("Key","key","target").setTooltip('The unique key for the target group that should match that used by the "Remember Targets" skill')],preview:[..._e()],summaryItems:["key"]})}};r(sa,"new",()=>new sa);let $n=sa;const oa=class oa extends Ce{constructor(){super({name:"Self",description:"Returns the current target back to the caster"})}};r(oa,"new",()=>new oa);let Pn=oa;const na=class na extends Ce{constructor(){super({name:"Single",description:"Targets a single unit in front of the current target (the casting player is the default target)",data:[new g("Range","range",5).setTooltip("The max distance away any target can be in blocks"),new g("Tolerance","tolerance").setTooltip("How much to expand the potential entity's hitbox in all directions, in blocks. This makes it easier to aim"),new b("Group","group",["Ally","Enemy","Both"],"Enemy").setTooltip("The alignment of targets to get"),new I("Through Wall","wall",!1).setTooltip("Whether to allow targets to be on the other side of a wall")],preview:[..._e(),new re("Line Preview"),new I("Line Preview","line",!1).setTooltip("Displays particles as a line of particles in front of the caster"),new x("Density","line-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("line",[!0]),new x("Start distance","line-start-distance",2).setTooltip("How far from the target's face to start drawing the preview, in meters").requireValue("line",[!0]),...Le("line"),new re("Cylinder Preview"),new I("Cylinder Preview","cylinder",!1).setTooltip("Displays particles as a cylinder of particles in front of the caster, showing the component's tolerance"),new x("Density","cylinder-density",1).setTooltip("The minimum amount of points to display per meter").requireValue("cylinder",[!0]),new x("Start distance","cylinder-start-distance",2).setTooltip("How far from the target's face to start drawing the preview, in meters").requireValue("cylinder",[!0]),...Le("cylinder")],summaryItems:["range","tolerance","group","wall"]})}};r(na,"new",()=>new na);let Vn=na;const Me=()=>[new I("Check Material","check-mat",!0).setTooltip("Whether the item needs to be a certain type"),new lt(!1,"Arrow").requireValue("check-mat",[!0]).setTooltip("The type the item needs to be"),new I("Check Data","check-data",!1).setTooltip("Whether the item needs to have a certain data value"),new ae("Data","data").requireValue("check-data",[!0]).setTooltip("The data value the item must have"),new I("Check Lore","check-lore",!1).setTooltip("Whether the item requires a bit of text in its lore"),new N("Lore","lore","text").requireValue("check-lore",[!0]).setTooltip("The text the item requires in its lore"),new I("Check Name","check-name",!1).setTooltip("Whether the item needs to have a bit of text in its display name"),new N("Name","name","name").requireValue("check-name",[!0]).setTooltip("The text the item requires in its display name"),new I("Regex","regex",!1).setTooltip("Whether the name and lore checks are regex strings. If you do not know what regex is, leave this option alone")],ia=class ia extends te{constructor(){super({name:"Altitude",description:"Applies child components whenever the player is on a certain height-level",data:[new g("Min","min").setTooltip("The minimum height a player has to be on"),new g("Max","max").setTooltip("The maximum height a player can be on")],summaryItems:["min","max"]})}};r(ia,"new",()=>new ia);let qn=ia;const la=class la extends te{constructor(){super({name:"Armor",description:"Applies child components when the target is wearing an armor item matching the given details",data:[new b("Armor","armor",["Any","Helmet","Chestplate","Leggings","Boots"]).setTooltip("The type of armor to check"),...Me()],summaryItems:["armor","material","data","lore","name"]})}};r(la,"new",()=>new la);let On=la;const ra=class ra extends te{constructor(){super({name:"Attribute",description:"Requires the target to have a given number of attributes",data:[new N("Attribute","attribute","Vitality").setTooltip("The name of the attribute you are checking the value of"),new g("Min","min").setTooltip("The minimum amount of the attribute the target requires"),new g("Max","max",999).setTooltip("The maximum amount of the attribute the target requires")],summaryItems:["attribute","min","max"]})}};r(ra,"new",()=>new ra);let Ln=ra;const ca=class ca extends te{constructor(){super({name:"Biome",description:"Applies child components when in a specified biome",data:[new b("Type","type",["In Biome","Not In Biome"],"In Biome").setTooltip("Whether the target should be in the biome. If checking for in the biome, they must be in any one of the checked biomes. If checking for the opposite, they must not be in any of the checked biomes"),new b("Biome","biome",kc,["Forest"],!0).setTooltip("The biomes to check for. The expectation would be any of the selected biomes need to match")],summaryItems:["type","biome"]})}};r(ca,"new",()=>new ca);let Fn=ca;const ua=class ua extends te{constructor(){super({name:"Block",description:"Applies child components if the target is currently standing on a block of the given type",data:[new b("Type","standing",["On Block","Not On Block","In Block","Not In Block"]).setTooltip(`Specifies which block to check and whether it should match the selected material. "On Block" is directly below the player while "In Block" is the block a player's feet are in`),new lt().setTooltip("The type of the block to require the targets to stand on")],summaryItems:["standing","material"]})}};r(ua,"new",()=>new ua);let Rn=ua;const pa=class pa extends te{constructor(){super({name:"Burning",description:"Applies child components if the caster burns or not",data:[new b("Type","burn",["Burn","Dont burn"],"Burn").setTooltip("Specifies whether the player has to be burning for this skill to be performed")],summaryItems:["burn"]})}};r(pa,"new",()=>new pa);let Nn=pa;const ha=class ha extends te{constructor(){super({name:"Ceiling",description:"Checks the height of the ceiling above each target",data:[new g("Distance","distance",5).setTooltip("How high to check for the ceiling"),new I("At least","at-least",!0).setTooltip("When true, the ceiling must be at least the give number of blocks high. If false, the ceiling must be lower than the given number of blocks")],summaryItems:["distance","at-least"]})}};r(ha,"new",()=>new ha);let xn=ha;const ma=class ma extends te{constructor(){super({name:"Chance",description:"Rolls a chance to apply child components",data:[new g("Chance","chance",25).setTooltip('The chance to execute children as a percentage. "25" would be 25%')],summaryItems:["chance"]})}};r(ma,"new",()=>new ma);let Cn=ma;const da=class da extends te{constructor(){super({name:"Class",description:'Applies child components when the target is the given class or optionally a profession of that class. For example, if you check for "Fighter" which professes into "Warrior", a "Warrior" will pass the check if you do not enable "exact"',data:[new or("Class","class",!1).setTooltip("The class the player should be"),new I("Exact","exact",!1).setTooltip("Whether the player must be exactly the given class. If false, they can be a later profession of the class")],summaryItems:["class","exact"]})}};r(da,"new",()=>new da);let Hn=da;const fa=class fa extends te{constructor(){super({name:"Class Level",description:"Applies child components when the level of the class with this skill is within the range. This only checks the level of the caster, not the targets",data:[new ae("Min Level","min-level",2).setTooltip("The minimum class level the player should be. If the player has multiple classes, this will be of their main class"),new ae("Max Level","max-level",99).setTooltip("The maximum class level the player should be. If the player has multiple classes, this will be of their main class")],summaryItems:["min-level","max-level"]})}};r(fa,"new",()=>new fa);let Wn=fa;const ga=class ga extends te{constructor(){super({name:"Combat",description:"Applies child components to targets that are in/out of combat, depending on the settings",data:[new I("In Combat","combat",!0).setTooltip("Whether the target should be in or out of combat"),new x("Seconds","seconds",10).setTooltip("The time in seconds since the last combat activity before something is considered not in combat")],summaryItems:["combat","seconds"]})}};r(ga,"new",()=>new ga);let Bn=ga;const wa=class wa extends te{constructor(){super({name:"Crouch",description:"Applies child components if the target player(s) are crouching",data:[new I("Crouching","crouch",!0).setTooltip("Whether the player should be crouching")],summaryItems:["crouch"]})}};r(wa,"new",()=>new wa);let Un=wa;const ya=class ya extends te{constructor(){super({name:"Direction",description:"Applies child components when the target or caster is facing the correct direction relative to the other",data:[new b("Type","type",["Target","Caster"]).setTooltip("The entity to check the direction of"),new b("Direction","direction",["Away","Towards"]).setTooltip("The direction the chosen entity needs to be looking relative to the other")],summaryItems:["type","direction"]})}};r(ya,"new",()=>new ya);let Gn=ya;const Ta=class Ta extends te{constructor(){super({name:"Distance",description:"Applies child components when the distance between the caster and the target matches the settings",data:[new g("Min Value","min-value").setTooltip("The minimum value for the distance required. This should be >= 0"),new g("Max Value","max-value",50).setTooltip("The maximum value for the distance required. This should be larger than the minimum value")],summaryItems:["min-value","max-value"]})}};r(Ta,"new",()=>new Ta);let jn=Ta;const va=class va extends te{constructor(){super({name:"Elevation",description:"Applies child components when the elevation of the target matches the settings",data:[new b("Type","type",["Normal","Difference"]).setTooltip("The type of comparison to make. Normal is just their Y-coordinate. Difference would be the difference between that the caster's Y-coordinate"),new g("Min Value","min-value").setTooltip('The minimum value for the elevation required. A positive minimum value with a "Difference" type would be for when the target is higher up than the caster'),new g("Max Value","max-value",255).setTooltip('The maximum value for the elevation required. A negative maximum value with a "Difference" type would be for when the target is below the caster')],summaryItems:["type","min-value","max-value"]})}};r(va,"new",()=>new va);let zn=va;const ba=class ba extends te{constructor(){super({name:"Else",description:"Applies child elements if the previous component failed to execute. This not only applies for conditions not passing, but mechanics failing due to no target or other cases"})}};r(ba,"new",()=>new ba);let Yn=ba;const ka=class ka extends te{constructor(){super({name:"Entity Type",description:"Applies child elements if the target matches one of the selected entity types",data:[new b("Types","types",["Location",..._c()],[],!0).setTooltip("The entity types to target"),new I("Blacklist","blacklist",!1).setTooltip("Whether to consider the listed types as a blacklist, meaning only entities that do NOT match one of them will pass the condition.")],summaryItems:["types"]})}};r(ka,"new",()=>new ka);let Kn=ka;const _a=class _a extends te{constructor(){super({name:"Fire",description:"Applies child components when the target is on fire",data:[new b("Type","type",["On Fire","Not On Fire"],"On Fire").setTooltip("Whether the target should be on fire")],summaryItems:["type"]})}};r(_a,"new",()=>new _a);let Xn=_a;const Ia=class Ia extends te{constructor(){super({name:"Flag",description:"Applies child components when the target is marked by the appropriate flag",data:[new b("Type","type",["Set","Not Set"],"Set").setTooltip("Whether the flag should be set"),new N("Key","key","key").setTooltip("The unique key representing the flag. This should match the key for when you set it using the Flag mechanic or the Flat Toggle mechanic")],summaryItems:["type","key"]})}};r(Ia,"new",()=>new Ia);let Zn=Ia;const Aa=class Aa extends te{constructor(){super({name:"Food",description:"Applies child components when the target's food level matches the settings",data:[new b("Type","type",["Food","Percent","Difference","Difference Percent"]).setTooltip("The type of measurement to use for the food. Food level is their flat food left. Percent is the percentage of food they have left. Difference is the difference between the target's flat food and the caster's. Difference percent is the difference between the target's percentage food left and the caster's"),new g("Min Value","min-value").setTooltip('The minimum food required. A positive minimum with one of the "Difference" types would be for when the target has more food'),new g("Max Value","max-value",10,2).setTooltip('The maximum food required. A negative maximum with one of the "Difference" types would be for when the target has less food')],summaryItems:["type","min-value","max-value"]})}};r(Aa,"new",()=>new Aa);let Jn=Aa;const Sa=class Sa extends te{constructor(){super({name:"Ground",description:"Applies child components when the target is on the ground",data:[new b("Type","type",["On Ground","Not On Ground"]).setTooltip("Whether the target should be on the ground")],summaryItems:["type"]})}};r(Sa,"new",()=>new Sa);let Qn=Sa;const Da=class Da extends te{constructor(){super({name:"Health",description:"Applies child components when the target's health matches the settings",data:[new b("Type","type",["Health","Percent","Difference","Difference Percent"]).setTooltip("The type of measurement to use for the health. Health is their flat health left. Percent is the percentage of health they have left. Difference is the difference between the target's flat health and the caster's. Difference percent is the difference between the target's percentage health left and the caster's"),new g("Min Value","min-value").setTooltip('The minimum health required. A positive minimum with one of the "Difference" types would be for when the target has more health'),new g("Max Value","max-value",10,2).setTooltip('The maximum health required. A negative maximum with one of the "Difference" types would be for when the target has less health')],summaryItems:["type","min-value","max-value"]})}};r(Da,"new",()=>new Da);let Mn=Da;const Ea=class Ea extends te{constructor(){super({name:"Item",description:"Applies child components when the target is wielding an item matching the given material",data:[...Me()],summaryItems:["material","data","lore","name"]})}};r(Ea,"new",()=>new Ea);let ei=Ea;const $a=class $a extends te{constructor(){super({name:"Inventory",description:"Applies child components when the target player contains the given item in their inventory. This does not work on mobs",data:[new g("Amount","amount",1).setTooltip("The amount of the item needed in the player's inventory"),...Me()],summaryItems:["material","amount","data","lore","name"]})}};r($a,"new",()=>new $a);let ti=$a;const Pa=class Pa extends te{constructor(){super({name:"Light",description:"Applies child components when the light level at the target's location matches the settings",data:[new g("Min Light","min-light").setTooltip("The minimum light level needed. 16 is full brightness while 0 is complete darkness"),new g("Max Light","max-light",16,16).setTooltip("The maximum light level needed. 16 is full brightness while 0 is complete darkness")],summaryItems:["min-light","max-light"]})}};r(Pa,"new",()=>new Pa);let ai=Pa;const Va=class Va extends te{constructor(){super({name:"Mana",description:"Applies child components when the target's mana matches the settings",data:[new b("Type","type",["Mana","Percent","Difference","Difference Percent"],"Mana").setTooltip("The type of measurement to use for the mana. Mana is their flat mana left. Percent is the percentage of mana they have left. Difference is the difference between the target's flat mana and the caster's. Difference percent is the difference between the target's percentage mana left and the caster's"),new g("Min Value","min-value").setTooltip("The minimum amount of mana needed"),new g("Max Value","max-value",10,2).setTooltip("The maximum amount of mana needed")],summaryItems:["type","min-value","max-value"]})}};r(Va,"new",()=>new Va);let si=Va;const qa=class qa extends te{constructor(){super({name:"Money",description:"Applies child components when the target's balance matches the settings (requires Vault and an economy plugin). Always is false for non-player targets",data:[new b("Type","type",["Min","Max","Between"],"Min").setTooltip("The type of comparison to make"),new g("Min Value","min-value",10).requireValue("type",["Min","Between"]).setTooltip("The minimum balance the target must have, inclusive"),new g("Max Value","max-value",100).requireValue("type",["Max","Between"]).setTooltip("The maximum balance the target can have, inclusive")],summaryItems:["type","min-value","max-value"]})}};r(qa,"new",()=>new qa);let oi=qa;const Oa=class Oa extends te{constructor(){super({name:"Mounted",description:"Applies child elements if the target is being mounted by one of the selected entity types",data:[new b("Types","types",ac,["Any"],!0).setTooltip("The entity types that can be mounting the target")],summaryItems:["types"]})}};r(Oa,"new",()=>new Oa);let ni=Oa;const La=class La extends te{constructor(){super({name:"Mounting",description:"Applies child elements if the target is mounting one of the selected entity types",data:[new b("Types","types",ac,["Any"],!0).setTooltip("The entity types the target can be mounting")],summaryItems:["types"]})}};r(La,"new",()=>new La);let ii=La;const Fa=class Fa extends te{constructor(){super({name:"MythicMob Type",description:"Applies child elements if the target corresponds to one of the entered MythicMob types, or is not a MythicMob if left empty",data:[new Ve("MythicMob Types","types").setTooltip("The MythicMob types to target")],summaryItems:["types"]})}};r(Fa,"new",()=>new Fa);let li=Fa;const Ra=class Ra extends te{constructor(){super({name:"Name",description:"Applies child components when the target has a name matching the settings",data:[new I("Contains Text","contains",!0).setTooltip("Whether the target should have a name containing the text"),new I("Regex","regex",!1).setTooltip("Whether the text is formatted as regex. If you do not know what regex is, ignore this option"),new N("Text","text","text").setTooltip("The text to look for in the target's name")],summaryItems:["contains","text"]})}};r(Ra,"new",()=>new Ra);let ri=Ra;const Na=class Na extends te{constructor(){super({name:"Offhand",description:"Applies child components when the target is wielding an item matching the given material as an offhand item. This is for v1.9+ servers only",data:[...Me()],summaryItems:["material","data","lore","name"]})}};r(Na,"new",()=>new Na);let ci=Na;const xa=class xa extends te{constructor(){super({name:"Permission",description:"Applies child components if the caster has the required permission",data:[new N("Permission","perm","some.permission").setTooltip("The permission the player needs to have")],summaryItems:["perm"]})}};r(xa,"new",()=>new xa);let ui=xa;const Ca=class Ca extends te{constructor(){super({name:"Potion",description:"Applies child components when the target has the potion effect",data:[new b("Type","type",["Active","Not Active"],"Active").setTooltip("Whether the potion should be active"),new b("Potion","potion",tc,"Any").setTooltip("The type of potion to look for"),new g("Min Rank","min-rank").setTooltip("The minimum rank the potion effect can be"),new g("Max Rank","max-rank",999).setTooltip("The maximum rank the potion effect can be")],summaryItems:["type","potion","min-rank","max-rank"]})}};r(Ca,"new",()=>new Ca);let pi=Ca;const Ha=class Ha extends te{constructor(){super({name:"Skill Level",description:"Applies child components when the skill level is with the range. This checks the skill level of the caster, not the targets",data:[new Vo("Skill","skill",!1).setTooltip("The name of the skill to check the level of. If you want to check the current skill, enter the current skill's name anyway"),new ae("Min Level","min-level",2).setTooltip("The minimum level of the skill needed"),new ae("Max Level","max-level",99).setTooltip("The maximum level of the skill needed")],summaryItems:["skill","min-level","max-level"]})}};r(Ha,"new",()=>new Ha);let hi=Ha;const Wa=class Wa extends te{constructor(){super({name:"Slot",description:"Applies child components when the target player has a matching item in the given slot",data:[new Ve("Slots (one per line)","slot",["9"]).setTooltip("The slots to look at. Slots 0-8 are the hot bar, 9-35 are the main inventory, 36-39 are armor, and 40 is the offhand slot. Multiple slots will check if any of the slots match"),...Me()],summaryItems:["slot","material","data","lore","name"]})}};r(Wa,"new",()=>new Wa);let mi=Wa;const Ba=class Ba extends te{constructor(){super({name:"Status",description:"Applies child components when the target has the status condition",data:[new b("Type","type",["Active","Not Active"]).setTooltip("Whether the status should be active"),new b("Status","status",["Any","Absorb","Curse","Disarm","Invincible","Root","Silence","Stun"]).setTooltip("The status to look for")],summaryItems:["type","status"]})}};r(Ba,"new",()=>new Ba);let di=Ba;const Ua=class Ua extends te{constructor(){super({name:"Time",description:"Applies child components when the server time matches the settings",data:[new b("Time","time",["Day","Night"],"Day").setTooltip("The time to check for in the current world")],summaryItems:["time"]})}};r(Ua,"new",()=>new Ua);let fi=Ua;const Ga=class Ga extends te{constructor(){super({name:"Tool",description:"Applies child components when the target is wielding a matching tool",data:[new b("Material","material",["Any","Wood","Stone","Iron","Gold","Diamond","Netherite"]).setTooltip("The material the held tool needs to be made out of"),new b("Tool","tool",["Any","Axe","Hoe","Pickaxe","Shovel","Sword"]).setTooltip("The type of tool it needs to be")],summaryItems:["material","tool"]})}};r(Ga,"new",()=>new Ga);let gi=Ga;const ja=class ja extends te{constructor(){super({name:"Value",description:"Applies child components if a stored value is within the given range",data:[new N("Key","key","value").setTooltip("The unique string used for the value set by the Value mechanics"),new g("Min Value","min-value",1).setTooltip("The lower bound of the required value"),new g("Max Value","max-value",999).setTooltip("The upper bound of the required value")],summaryItems:["key","min-value","max-value"]})}};r(ja,"new",()=>new ja);let wi=ja;const za=class za extends te{constructor(){super({name:"Value Text",description:"Applies child components if text value match to the settings",data:[new b("Mode","mode",["REGEX","EXACTLY","CONTAIN","START","END"],"EXACTLY").setTooltip("The comparison mode should be conditioned."),new N("Key","value","").setTooltip("Key of the value to be compared."),new N("Expect","expect","").setTooltip("Strings used for comparison.")]})}};r(za,"new",()=>new za);let yi=za;const Ya=class Ya extends te{constructor(){super({name:"Water",description:"Applies child components when the target is in or out of water, depending on the settings",data:[new b("State","state",["In Water","Out Of Water"]).setTooltip("Whether the target needs to be in the water")],summaryItems:["state"]})}};r(Ya,"new",()=>new Ya);let Ti=Ya;const Ka=class Ka extends te{constructor(){super({name:"Weather",description:"Applies child components when the target's location has the given weather condition",data:[new b("Type","type",["Rain","None","Snow","Thunder"]).setTooltip("Whether the target needs to be in the water")],summaryItems:["type"]})}};r(Ka,"new",()=>new Ka);let vi=Ka;const Xa=class Xa extends te{constructor(){super({name:"World",description:"Applies child components when the target is in a specific world",data:[new I("Blacklist","blacklist",!1).setTooltip("Whether the list should be seen as a blacklist"),new Ve("Worlds","worlds").setTooltip("Which worlds should be taken into consideration")],summaryItems:["blacklist","worlds"]})}};r(Xa,"new",()=>new Xa);let bi=Xa;const Oo=()=>[new re("Item Options"),new lt(!1,"Arrow").setTooltip("The type of item to give to the player"),new ae("Amount","amount",1).setTooltip("The quantity of the item to give to the player"),new ae("Durability","data").requireValue("material",wr()).setTooltip("The durability to reduce from the item"),new I("Unbreakable","unbreakable",!1).requireValue("material",wr()).setTooltip("Whether to make the item unbreakable"),new ae("CustomModelData","byte",0).setTooltip("The CustomModelData of the item"),new b("Hide Flags","hide-flags",["Enchants","Attributes","Unbreakable","Destroys","Placed on","Potion effects","Dye"],[],!0).setTooltip("Flags to hide from the item"),new I("Custom Name/Lore","custom",!1).setTooltip("Whether to apply a custom name/lore to the item"),new N("Name","name","Name").requireValue("custom",[!0]).setTooltip("The name of the item"),new Ve("Lore","lore").requireValue("custom",[!0]).setTooltip("The lore text for the item (the text below the name)"),new Oe("Potion Color","potion_color","#385dc6").requireValue("material",["Potion","Splash potion","Lingering potion"]).setTooltip("The potion color in hex RGB"),new b("Potion Type","potion_type",sc,"Speed").requireValue("material",["Potion","Splash potion","Lingering potion"]).setTooltip("The type of potion"),new ae("Potion Level","potion_level").requireValue("material",["Potion","Splash potion","Lingering potion"]).setTooltip("The potion level"),new ae("Potion Duration","potion_duration",30).requireValue("material",["Potion","Splash potion","Lingering potion"]).setTooltip("The potion duration (seconds)"),new Oe("Armor Color","armor_color","#a06540").requireValue("material",["Leather helmet","Leather chestplate","Leather leggings","Leather boots"]).setTooltip("The armor color in hex RGB")],Lo=()=>[new re("Particle Options"),new b("Particle","particle",ar,"Villager happy").setTooltip("The type of particle to display"),new b("Material","material",()=>[...nt()],"Arrow").requireValue("particle",["Item crack"]).setTooltip("The material to use for the particles"),new b("Material","material",()=>[...ze()],"Dirt").requireValue("particle",["Block crack","Block dust","Falling dust","Block marker"]).setTooltip("The block to use for the particles"),new ae("Durability","durability",0).requireValue("particle",["Item crack"]).setTooltip("The durability to be reduced from the item used to make the particles"),new ae("CustomModelData","type",0).requireValue("particle",["Item crack"]).setTooltip("The CustomModelData of the item used to make the particles"),new Oe("Dust Color","dust-color","#FF0000").requireValue("particle",["Redstone","Dust color transition"]).setTooltip("The color of the dust particles in hex RGB"),new Oe("Final Dust Color","final-dust-color","#FF0000").requireValue("particle",["Dust color transition"]).setTooltip("The color to transition to, in hex RGB"),new x("Dust Size","dust-size",1).requireValue("particle",["Redstone","Dust color transition"]).setTooltip("The size of the dust particles"),new b("Arrangement","arrangement",["Sphere","Circle","Hemisphere"],"Sphere").setTooltip("The arrangement to use for the particles. Circle is a 2D circle, Hemisphere is half a 3D sphere, and Sphere is a 3D sphere"),new b("Circle Direction","direction",["XY","XZ","YZ"],"XZ").requireValue("arrangement",["Circle"]).setTooltip("The orientation of the circle. XY and YZ are vertical circles while XZ is a horizontal circle"),new g("Radius","radius",1).setTooltip("The radius of the arrangement in blocks"),new g("Points","particles",20).setTooltip("The amount of points that conform the chosen arrangement"),new ae("Effect Data","data").requireValue("particle",["Smoke","Ender Signal","Mobspawner Flames","Potion Break","Sculk charge"]).setTooltip("The data value to use for the particle. The effect changes between particles such as the orientation for smoke particles or the color for potion break"),new ae("Visible Radius","visible-radius",25).setTooltip("How far away players can see the particles from in blocks"),new x("DX","dx").setTooltip("Offset in the X direction, used as the Red value for some particles"),new x("DY","dy").setTooltip("Offset in the Y direction, used as the Green value for some particles"),new x("DZ","dz").setTooltip("Offset in the Z direction, used as the Blue value for some particles"),new x("Amount","amount",1).setTooltip('Number of particles to play per point. For "Spell mob" and "Spell mob ambient" particles, set to 0 to control the particle color'),new x("Speed","speed",.1).setTooltip("Speed of the particle. For some particles controls other parameters, such as size")],nr=()=>[new re("Projectile Options"),new g("Velocity","velocity",3).setTooltip("How fast the projectile is launched. A negative value fires it in the opposite direction."),new g("Lifespan","lifespan",5).setTooltip("How long in secods before the projectile will expire in case it doesn't hit anything."),new I("On Expire","on-expire",!1).setTooltip("Whether to add the projectile's expire location as one of the targets. You can filter out this target with EntityTypeContidion: Location"),new b("Spread","spread",["Cone","Horizontal Cone","Rain"],"Cone").setTooltip('The orientation for firing projectiles. Cone will fire arrows in a cone centered on your reticle. Horizontal cone does the same as cone, just locked to the XZ axis (parallel to the ground). Rain drops the projectiles from above the target. For firing one arrow straight, use "Cone"'),new g("Amount","amount",1).setTooltip("The number of projectiles to fire"),new g("Angle","angle",30).requireValue("spread",["Cone","Horizontal Cone"]).setTooltip("The angle in degrees of the cone arc to spread projectiles over. If you are only firing one projectile, this does not matter."),new g("Height","height",8).requireValue("spread",["Rain"]).setTooltip("The distance in blocks over the target to rain the projectiles from"),new g("Radius","rain-radius",2).requireValue("spread",["Rain"]).setTooltip("The radius of the rain emission area in blocks"),new re("Offset"),new g("Forward Offset","forward").setTooltip("How far forward in front of the target the projectile should fire from in blocks. A negative value will put it behind."),new g("Upward Offset","upward").setTooltip("How far above the target the projectile should fire from in blocks. A negative value will put it below."),new g("Right Offset","right").setTooltip("How far to the right of the target the projectile should fire from. A negative value will put it to the left.")],ip=s=>(s.requireValue("use-effect",[!0]),s),lp=s=>s,Fo=s=>{let e=lp;return s&&(e=ip),[new re("Particle Effect Options"),new I("Use Effect","use-effect").setTooltip("Whether to use a particle effect."),e(new N("Effect Key","effect-key","default").setTooltip("The key to refer to the effect by. Only one effect of each key can be active at a time.")),e(new g("Duration","duration",1).setTooltip("The time to play the effect for in seconds")),e(new N("Shape","-shape","hexagon").setTooltip('Key of a formula for deciding where particles are played each iteration. View "effects.yml" for a list of defined formulas and their keys.')),e(new b("Shape Direction","-shape-dir",["XY","YZ","XZ"],"XY").setTooltip("The plane the shape formula applies to. XZ would be flat, the other two are vertical.")),e(new N("Shape Size","-shape-size","1").setTooltip("Formula for deciding the size of the shape. This can be any sort of formula using the operations defined in the wiki.")),e(new N("Animation","-animation","one-circle").setTooltip('Key of a formula for deciding where the particle effect moves relative to the target. View "effects.yml" for a list of defined formulas and their keys.')),e(new b("Animation Direction","-anim-dir",["XY","YZ","XZ"],"XZ").setTooltip("The plane the animation motion moves through. XZ wold be flat, the other two are vertical.")),e(new N("Animation Size","-anim-size","1").setTooltip("Formula for deciding the multiplier of the animation distance. This can be any sort of formula using the operations defined in the wiki.")),e(new ae("Interval","-interval",1).setTooltip("Number of ticks between playing particles.")),e(new ae("View Range","-view-range",25).setTooltip("How far away the effect can be seen from.")),e(new b("Particle","-particle-type",ar,"Villager happy").setTooltip("The type of particle to use.")),e(new b("Material","-particle-material",nt,"Dirt").requireValue("-particle-type",["Item crack"]).setTooltip("The material to use for the particle.")),e(new b("Material","-particle-material",ze,"Dirt").requireValue("-particle-type",["Block crack","Block dust","Falling dust","Block marker"]).setTooltip("The block to use for the particle.")),e(new ae("Durability","-particle-durability").requireValue("particle",["Item crack"]).setTooltip("The durability to be reduced from the item used to make the particles")),e(new ae("CustomModelData","-particle-data").requireValue("-particle-type",["Item crack"]).setTooltip("The data value for the material used by the particle. For 1.14+ determines the CustomModelData of the item.")),new Oe("Dust Color","-particle-dust-color","#FF0000").requireValue("-particle-type",["Redstone","Dust color transition"]).setTooltip("The color of the dust particles in hex RGB"),new Oe("Final Dust Color","-particle-final-dust-color","#FF0000").requireValue("-particle-type",["Dust color transition"]).setTooltip("The color to transition to, in hex RGB"),new x("Dust Size","-particle-dust-size",1).requireValue("-particle-type",["Redstone","Dust color transition"]).setTooltip("The size of the dust particles"),e(new ae("Amount","-particle-amount",1).setTooltip('Number of particles to play per point. For "Spell mob" and "Spell mob ambient" particles, set to 0 to control the particle color.')),e(new x("DX","-particle-dx").setTooltip("Offset in the X direction, used as the Red value for some particles.")),e(new x("DY","-particle-dy").setTooltip("Offset in the Y direction, used as the Green value for some particles.")),e(new x("DZ","-particle-dz").setTooltip("Offset in the Z direction, used as the Blue value for some particles.")),e(new x("Speed","-particle-speed",.1).setTooltip("Speed of the particle. For some particles controls other parameters, such as size.")),e(new x("Initial Rotation","-initial-rotation").setTooltip("The amount to rotate the effect (useful for effects like the square).")),e(new I("Rotate w/ Player","-with-rotation",!0).setTooltip("Whether to follow the rotation of the player for the effect."))]},Za=class Za extends O{constructor(){super({name:"Armor",description:"Sets the specified armor slot of the target to the item defined by the settings",data:[new b("Slot","slot",["Hand","Off Hand","Feet","Legs","Chest","Head"]).setTooltip("The slot number to set the item to"),new I("Overwrite","overwrite",!1).setTooltip("USE WITH CAUTION. Whether to overwrite an existing item in the slot. If true, will permanently delete the existing iem"),...Oo()],summaryItems:["slot","material","data","lore","name"]})}};r(Za,"new",()=>new Za);let ki=Za;const Ja=class Ja extends O{constructor(){super({name:"Armor Stand",description:"Summons an armor stand that can be used as a marker or for item display (check Armor Mechanic for latter). Applies child components on the armor stand",data:[new N("Armor Stand Key","key","default").setTooltip("The key to refer to the armor stand by. Only one armor stand of each key can be active per target at a time"),new g("Duration","duration",5).setTooltip("How long the armor stand lasts before being deleted"),new N("Name","name","Armor Stand").setTooltip("The name the armor stand displays"),new I("Name visible","name-visible",!1).setTooltip("Whether the armor stand's name should be visible from afar"),new I("Follow target","follow",!1).setTooltip("Whether the armor stand should follow the target"),new I("Marker","marker",!1).setTooltip("Setting this to true will remove the armor stand's hit-box but will also disable gravity"),new I("Apply gravity","gravity",!0).setTooltip("Whether the armor stand should be affected by gravity").requireValue("marker",[!1]),new I("Small","tiny",!1).setTooltip("Whether the armor stand should be small"),new I("Show arms","arms",!1).setTooltip("Whether the armor stand should display its arms"),new I("Show base plate","base",!1).setTooltip("Whether the armor stand should display its base plate"),new I("Visible","visible",!0).setTooltip("Whether the armor stand should be visible"),new re("Offset"),new g("Forward Offset","forward").setTooltip("How far forward in front of the target the armor stand should be in blocks. A negative value will put it behind"),new g("Upward Offset","upward").setTooltip("How far above the target the armor stand should be in blocks. A negative value will put it below"),new g("Right Offset","right").setTooltip("How far to the right the armor stand should be of the target. A negative value will put it to the left")],summaryItems:["duration","name","follow","gravity","visible"]},!0)}};r(Ja,"new",()=>new Ja);let _i=Ja;const Qa=class Qa extends O{constructor(){super({name:"Armor Stand Pose",description:"Sets the pose of an armor stand target. Values should be in the format x,y,z where rotations are in degrees. Example: 0.0,0.0,0.0",data:[new N("Head","head","").setTooltip("The pose values of the head. Leave empty if should be ignored"),new N("Body","body","").setTooltip("The pose values of the body. Leave empty if should be ignored"),new N("Left Arm","left-arm","").setTooltip("The pose values of the left arm. Leave empty if should be ignored"),new N("Right Arm","right-arm","").setTooltip("The pose values of the right arm. Leave empty if should be ignored"),new N("Left Leg","left-leg","").setTooltip("The pose values of the left leg. Leave empty if should be ignored"),new N("Right Leg","right-leg","").setTooltip("The pose values of the right leg. Leave empty if should be ignored")]})}};r(Qa,"new",()=>new Qa);let Ii=Qa;const Ma=class Ma extends O{constructor(){super({name:"Attribute",description:"Gives a player bonus attributes temporarily",data:[new N("Attribute","key","Intelligence").setTooltip("The name of the attribute to add to"),new b("Operation","operation",["ADD_NUMBER","MULTIPLY_PERCENTAGE"],"ADD_NUMBER").setTooltip("The operation on the original value by amount, ADD_NUMBER: Scalar adding, MULTIPLY_PERCENTAGE: Multiply the value by amount"),new g("Amount","amount",5,2).setTooltip("The amount to use with the operation"),new g("Seconds","seconds",3).setTooltip("How long in seconds to give the attributes to the player"),new I("Stackable","stackable",!1).setTooltip("Whether applying multiple times stacks the effects")],summaryItems:["key","operation","amount","seconds"]})}};r(Ma,"new",()=>new Ma);let Ai=Ma;const es=class es extends O{constructor(){super({name:"Block",description:"Changes blocks to the given type of block for a limited duration",data:[new b("Shape","shape",["Sphere","Cuboid"],"Sphere").setTooltip("The shape of the region to change the blocks for"),new b("Type","type",()=>["Air","Any","Solid",...ze()],"Solid").setTooltip("The type of blocks to replace. Air or any would be for making obstacles while solid would change the environment"),new b("Block","block",ze,"Ice").setTooltip("The type of block to turn the region into"),new ae("Block Data","data").setTooltip("The block data to apply, mostly applicable for things like signs, woods, steps, or the similar"),new I("Reset Yaw","reset-yaw",!1).setTooltip("Whether the target's yaw should be reset, effectively making the offsets cardinally aligned"),new g("Seconds","seconds",5).setTooltip("How long the blocks should be replaced for"),new g("Radius","radius",3).requireValue("shape",["Sphere"]).setTooltip("The radius of the sphere region in blocks"),new g("Width (X)","width",5).requireValue("shape",["Cuboid"]).setTooltip("The width of the cuboid in blocks"),new g("Height (Y)","height",5).requireValue("shape",["Cuboid"]).setTooltip("The height of the cuboid in blocks"),new g("Depth (Z)","depth",5).requireValue("shape",["Cuboid"]).setTooltip("The depth of the cuboid in blocks"),new re("Offset"),new g("Forward Offset","forward").setTooltip("How far forward in front of the target the region should be in blocks. A negative value will put it behind"),new g("Upward Offset","upward").setTooltip("How far above the target the region should be in blocks. A negative value will put it below"),new g("Right Offset","right").setTooltip("How far to the right the region should be of the target. A negative value will put it to the left")],preview:[..._e(),new I("Center only","per-target-center-only",!0).setTooltip("Whether to display particles only at the center of the affected area, or at each affected block").requireValue("per-target",[!0])],summaryItems:["shape","type","block","seconds"]})}};r(es,"new",()=>new es);let Si=es;const ts=class ts extends O{constructor(){super({name:"Buff",description:"Buffs combat stats of the target",data:[new I("Immediate","immediate",!1).setTooltip("Whether to apply the buff to the current damage trigger"),new b("Type","type",["DAMAGE","DEFENSE","SKILL_DAMAGE","SKILL_DEFENSE","HEALING"],"DAMAGE").requireValue("immediate",[!1]).setTooltip("What type of buff to apply. DAMAGE/DEFENSE is for regular attacks, SKILL_DAMAGE/SKILL_DEFENSE are for damage from abilities, and HEALING is for healing from abilities"),new b("Modifier","modifier",["Flat","Multiplier"],"Flat").setTooltip("The sort of scaling for the buff. Flat will increase/reduce incoming damage by a fixed amount where Multiplier does it by a percentage of the damage. Multipliers above 1 will increase damage taken while multipliers below 1 reduce damage taken"),new N("Category","category","").requireValue("type",["SKILL_DAMAGE","SKILL_DEFENSE"]).setTooltip("What kind of skill damage to affect. If left empty, this will affect all skill damage"),new g("Value","value",1).setTooltip("The amount to increase/decrease incoming damage by"),new g("Seconds","seconds",3).requireValue("immediate",[!1]).setTooltip("The duration of the buff in seconds")],summaryItems:["type","modifier","value","seconds"]})}};r(ts,"new",()=>new ts);let Di=ts;const as=class as extends O{constructor(){super({name:"Cancel",description:"Cancels the event that caused the trigger this is under to go off. For example, damage based triggers will stop the damage that was dealt while the Launch trigger would stop the projectile from firing"})}};r(as,"new",()=>new as);let Ei=as;const ss=class ss extends O{constructor(){super({name:"Cancel Effect",description:"Stops a particle effect prematurely",data:[new N("Effect Key","effect-key","default").setTooltip("The key used when setting up the effect")],summaryItems:["effect-key"]},!1)}};r(ss,"new",()=>new ss);let $i=ss;const os=class os extends O{constructor(){super({name:"Channel",description:"Applies child effects after a duration which can be interrupted. During the channel, the player cannot move, attack, or use other spells",data:[new I("Still","still",!0).setTooltip("Whether to hold the player in place while channeling"),new g("Time","time",3).setTooltip("The amouont of time, in seconds, to channel for")],summaryItems:["still","time"]},!0)}};r(os,"new",()=>new os);let Pi=os;const ns=class ns extends O{constructor(){super({name:"Cleanse",description:"Cleanses negative potion or status effects from the targets",data:[new b("Potion","potion",Ic,void 0,!0).setTooltip("The type of potion effect to remove from the target"),new b("Status","status",["All","Curse","Disarm","Root","Silence","Stun"],void 0,!0).setTooltip("The status to remove from the target")],summaryItems:["potion","status"]},!1)}};r(ns,"new",()=>new ns);let Vi=ns;const is=class is extends O{constructor(){super({name:"Command",description:"Executes a command for each of the targets",data:[new N("Command","command","").setTooltip(`The command to execute. {player} = caster's name, {target} = target's name, {targetUUID} = target's UUID (useful if targets are non players), &lc: "{", &rc: "}", &sq: "'"`),new b("Execute Type","type",["Console","OP"],"OP").setTooltip("Console: executes the command from the console. OP: Only if the target is a player, will have them execute it while given a temporary OP permission (If server closes in the meantime, the permission might stay, not recommended!!)")],summaryItems:["command","type"]},!1)}};r(is,"new",()=>new is);let qi=is;const ls=class ls extends O{constructor(){super({name:"Cooldown",description:"Lowers the cooldowns of the target's skill(s). If you provide a negative amount, it will increase the cooldown",data:[new N('Skill (or "all")',"skill","all").setTooltip("The skill to modify the cooldown for"),new b("Type","type",["Seconds","Percent"],"Seconds").setTooltip("The modification unit to use. Seconds will add/subtract seconds from the cooldown while Percent will add/subtract a percentage of its full cooldown"),new g("Value","value",-1).setTooltip("The amount to add/subtract from the skill's cooldown")],summaryItems:["skill","type","value"]},!1)}};r(ls,"new",()=>new ls);let Oi=ls;const rs=class rs extends O{constructor(){super({name:"Damage",description:"Inflicts skill damage to each target. Multiplier type would be a percentage of the target health",data:[new b("Type","type",["Damage","Multiplier","Percent Left","Percent Missing"],"Damage").setTooltip("The unit to use for the amount of damage. Damage will deal flat damage, Multiplier will deal a percentage of the target's max health, Percent Left will deal a percentage of their current health, and Percent Missing will deal a percentage of the difference between their max health and current health"),new g("Value","value",3,1).setTooltip("The amount of damage to deal"),new I("True Damage","true").setTooltip("Whether to deal true damage. True damage ignores armor and all plugin checks, and doesn not have a damage animation nor knockback"),new N("Classifier","classifier","default").setTooltip("The type of damage to deal. Can act as elemental damage or fake physical damage"),new I("Apply Knockback","knockback",!0).setTooltip("Whether the damage will inflict knockback. Ignored if it is True Damage"),new b("Damage Cause","cause",["Contact","Custom","Entity Attack","Entity Sweep Attack","Projectile","Suffocation","Fall","Fire","Fire Tick","Melting","Lava","Drowning","Block Explosion","Entity Explosion","Void","Lightning","Suicide","Starvation","Poison","Magic","Wither","Falling Block","Thorns","Dragon Breath","Fly Into Wall","Hot Floor","Cramming","Dryout","Freeze","Sonic Boom"],"Custom").setTooltip("Damage Cause considered by the server. This will have influence over the death message and ProRPGItems' defenses").requireValue("true",[!1])],summaryItems:["value","true","knockback"]},!1)}};r(rs,"new",()=>new rs);let Li=rs;const cs=class cs extends O{constructor(){super({name:"Damage Buff",description:"Modifies the physical damage dealt by each target by a multiplier or a flat amount for a limited duration. Negative flat amounts or multipliers less than one will reduce damage dealt while the opposite will increase damage dealt. (e.g. a 5% damage buff would be a multiplier or 1.05)",data:[new b("Type","type",["Flat","Multiplier"],"Flat").setTooltip("The type of buff to apply. Flat increases damage by a fixed amount while multiplier increases it by a percentage"),new I("Skill Damage","skill").setTooltip("Whether to buff skill damage. If false, it will affect physical damage"),new g("Value","value",1).setTooltip('The amount to increase/decrease the damage by. A negative amoutn with the "Flat" type will decrease damage, similar to a number less than 1 for the multiplier'),new g("Seconds","seconds",3).setTooltip("The duration of the buff in seconds")],summaryItems:["type","skill","value","seconds"]},!1)}};r(cs,"new",()=>new cs);let Fi=cs;const us=class us extends O{constructor(){super({name:"Damage Lore",description:"Damages each target based on a value found in the lore of the item held by the caster",data:[new b("Hand","hand",["Main","Offhand"],"Main").setTooltip("The hand to check for the item. Offhand items are MC 1.9+ only"),new N("Regex","regex","Damage: {value}").setTooltip("The regex for the text to look for. Use {value} for where the important number should be. If you do not know about regex, consider looking it up on Wikipedia or avoid using major characters such as [ ] { } ( ) . + ? * ^ \\ |"),new g("Multiplier","multiplier",1).setTooltip("The multiplier to use on the value to get the actual damage to deal"),new I("True Damage","true").setTooltip("Whether to deal true damage. True damage ignores armor and all plugin checks"),new N("Classifier","classifier","default").setTooltip("The type of damage to deal. Can act as elemental damage or fake physical damage"),new I("Apply Knockback","knockback",!0).setTooltip("Whether the damage will inflict knockback. Ignored if it is True Damage"),new b("Damage Cause","cause",["Contact","Entity Attack","Entity Sweep Attack","Projectile","Suffocation","Fall","Fire","Fire Tick","Melting","Lava","Drowning","Block Explosion","Entity Explosion","Void","Lightning","Suicide","Starvation","Poison","Magic","Wither","Falling Block","Thorns","Dragon Breath","Custom","Fly Into Wall","Hot Floor","Cramming","Dryout","Freeze","Sonic Boom"],"Entity Attack").setTooltip("Damage Cause considered by the server. This will have influence over the death message and ProRPGItems' defenses").requireValue("true",[!1])],summaryItems:["hand","multiplier","true","knockback"]},!1)}};r(us,"new",()=>new us);let Ri=us;const ps=class ps extends O{constructor(){super({name:"Defense Buff",description:"Modifies the physical damage taken by each target by a multiplier or a flat amount for a limited duration. Negative flag amounts or multipliers less than one will reduce damage taken while the opposite will increase damage taken. (e.g. a 5% defense buff would be a multiplier or 0.95, since you would be taking 95% damage)",data:[new b("Type","type",["Flat","Multiplier"],"Flat").setTooltip("The type of buff to apply. Flat will increase/reduce incoming damage by a fixed amount where Multiplier does it by a percentage of the damage. Multipliers above 1 will increase damage taken while multipliers below 1 reduce damage taken"),new I("Skill Defense","skill").setTooltip("Whether to buff skill defense. If false, it will affect physical defense"),new g("Value","value",1).setTooltip("The amount to increase/decrease incoming damage by"),new g("Seconds","seconds",3).setTooltip("The duration of the buff in seconds")],summaryItems:["type","skill","value","seconds"]},!1)}};r(ps,"new",()=>new ps);let Ni=ps;const hs=class hs extends O{constructor(){super({name:"Delay",description:"Applies child components after a delay",data:[new g("Delay","delay",2).setTooltip("The amount of time to wait before applying child components in seconds")],summaryItems:["delay"]},!0)}};r(hs,"new",()=>new hs);let xi=hs;const ms=class ms extends O{constructor(){super({name:"Disguise",description:"Disguises each target according to the settings. This mechanic requires the LibsDisguise plugin to be installed on your server",data:[new g("Duration","duration",-1).setTooltip("How long to apply the disguise for in seconds. Use a negative number to permanently disguise the targets"),new b("Type","type",["Mob","Player","Misc"],"Mob").setTooltip("The type of disguise to use, as defined by the LibsDisguise plugin"),new b("Mob","mob",Ac,"Zombie").requireValue("type",["Mob"]).setTooltip("The type of mob to disguise the target as"),new I("Adult","adult",!0).requireValue("type",["Mob"]).setTooltip("Whether to use the adult variant of the mob"),new N("Player","player","Eniripsa96").requireValue("type",["Player"]).setTooltip("The player to disguise the target as"),new b("Misc","misc",Sc,"Painting").requireValue("type",["Misc"]).setTooltip("The object to disguise the target as"),new ae("Data","data",0).requireValue("misc",["Area effect cloud","Armor stand","Arrow","Boat","Dragon fireball","Egg","Ender crystal","Ender pearl","Ender signal","Experience orb","Fireball","Firework","Fishing hook","Item frame","Leash hitch","Minecart","Minecart chest","Minecart command","Minecart furnace","Minecart hopper","Minecart mob spawner","Minecart tnt","Painting","Primed tnt","Shulker bullet","Snowball","Spectral arrow","Splash potion","Thrown exp bottle","Wither skull"]).setTooltip("Data value to use for the disguise type. What it does depends on the disguise"),new b("Material","mat",()=>[...nt()],"Arrow").requireValue("misc",["Dropped item"]).setTooltip("Material to use for the disguise type."),new b("Material","mat",()=>[...ze()],"Anvil").requireValue("misc",["Falling block"]).setTooltip("Block to use for the disguise type.")],summaryItems:["duration","type","mob","player","misc"]},!1)}};r(ms,"new",()=>new ms);let Ci=ms;const ds=class ds extends O{constructor(){super({name:"Durability",description:"Lowers the durability of a held item",data:[new g("Amount","amount",1).setTooltip("Amount to reduce the item's durability by"),new I("Offhand","offhand").setTooltip("Whether to apply to the offhand slot")],summaryItems:["amount","offhand"]},!1)}};r(ds,"new",()=>new ds);let Hi=ds;const fs=class fs extends O{constructor(){super({name:"Experience",description:"Modifies target's specified class experience",data:[new ae("Value","value",1),new b("Mode","mode",["give","take","set"],"give",!1).setTooltip("To give, take or set specified valued"),new b("Type","type",["flat","percent"],"flat",!1).setTooltip("Flat value or percent from next level experience"),new N("Group","group","class").setTooltip("Group name to modify experience"),new I("Level Down","level-down",!1).setTooltip("Whether to use skill and level down player class if current exp is insufficient")],summaryItems:["value","mode","type","group"]},!1)}};r(fs,"new",()=>new fs);let Wi=fs;const gs=class gs extends O{constructor(){super({name:"Explosion",description:"Causes an explosion at the current target's position",data:[new g("Power","power",3).setTooltip("The strength of the explosion"),new I("Damage Blocks","damage").setTooltip("Whether to damage blocks with the explosion"),new I("Fire","fire").setTooltip("Whether to set affected blocks on fire")],summaryItems:["power","damage","fire"]},!1)}};r(gs,"new",()=>new gs);let Bi=gs;const ws=class ws extends O{constructor(){super({name:"Fire",description:"Sets the target on fire for a duration",data:[new g("Damage","damage",1).setTooltip("The damage dealt by each fire tick"),new g("Seconds","seconds",3,1).setTooltip("The duration of the fire in seconds")],summaryItems:["damage","seconds"]},!1)}};r(ws,"new",()=>new ws);let Ui=ws;const ys=class ys extends O{constructor(){super({name:"Flag",description:"Marks the target with a flag for a duration. Flags can be checked by other triggers, spells or the related for interesting synergies and effects",data:[new N("Key","key","key").setTooltip("The unique string for the flag. Use the same key when checking it in a Flag Condition"),new g("Seconds","seconds",3,1).setTooltip("The duration the flag should be set for. To set one indefinitely, use Flag Toggle")],summaryItems:["key","seconds"]})}};r(ys,"new",()=>new ys);let Gi=ys;const Ts=class Ts extends O{constructor(){super({name:"Flag Clear",description:"Clears a flag from the target",data:[new N("Key","key","key").setTooltip("The unique string for the flag. This should match that of the mechanic that set the flag to begin with")],summaryItems:["key"]})}};r(Ts,"new",()=>new Ts);let ji=Ts;const vs=class vs extends O{constructor(){super({name:"Flag Toggle",description:"Toggles a flag on or off for the target. This can be used to make toggle effects",data:[new N("Key","key","key").setTooltip("The unique string for the flag. Use the same key when checking it in a Flag Condition")],summaryItems:["key"]})}};r(vs,"new",()=>new vs);let zi=vs;const bs=class bs extends O{constructor(){super({name:"Food",description:"Adds or removes to a player's hunger and saturation",data:[new g("Food","food",1,1).setTooltip("The amount of food to give. Use a negative number to lower the food meter"),new g("Saturation","saturation").setTooltip("How much saturation to give. Use a negative number to lower saturation. This is the hidden value that determines how long until food starts going down")],summaryItems:["food","saturation"]},!1)}};r(bs,"new",()=>new bs);let Yi=bs;const ks=class ks extends O{constructor(){super({name:"Forget Targets",description:'Clears targets stored by the "Remember Targets" mechanic',data:[new N("Key","key","key").setTooltip("The unique key the targets were stored under")],summaryItems:["key"]},!1)}};r(ks,"new",()=>new ks);let Ki=ks;const _s=class _s extends O{constructor(){super({name:"Heal",description:"Restores health to each target",data:[new b("Type","type",["Health","Percent"],"Health").setTooltip("The unit to use for the amount of health to restore. Health restores a flat amount while Percent restores a percentage of their max health"),new g("Value","value",3,1).setTooltip("The amount of health to restore")],summaryItems:["type","value"]},!1)}};r(_s,"new",()=>new _s);let Xi=_s;const Is=class Is extends O{constructor(){super({name:"Health Set",description:"Sets the target's health to the specified amount, ignoring resistances, damage buffs, and so on",data:[new g("Health","health",1).setTooltip("The health to set to")],summaryItems:["health"]},!1)}};r(Is,"new",()=>new Is);let Zi=Is;const As=class As extends O{constructor(){super({name:"Held Item",description:"Sets the held item slot of the target player. This will do nothing if trying to set it to a skill slot",data:[new g("Slot","slot").setTooltip("The slot to set it to")],summaryItems:["slot"]},!1)}};r(As,"new",()=>new As);let Ji=As;const Ss=class Ss extends O{constructor(){super({name:"Immunity",description:"Provides damage immunity from one source for a duration",data:[new b("Type","type",tr,"Poison").setTooltip("The damage type to give an immunity for"),new g("Seconds","seconds",3).setTooltip("How long to give an immunity for"),new g("Multiplier","multiplier").setTooltip("The multiplier for the incoming damage. Use 0 if you want full immunity")],summaryItems:["type","seconds","multiplier"]})}};r(Ss,"new",()=>new Ss);let Qi=Ss;const Ds=class Ds extends O{constructor(){super({name:"Interrupt",description:"Interrupts any channeling being done by each target if applicable"})}};r(Ds,"new",()=>new Ds);let Mi=Ds;const Es=class Es extends O{constructor(){super({name:"Invisibility",description:"Applies invisibility effect on target, optionally hiding equipment (Requires ProtocolLib).",data:[new ae("Duration","duration",200).setTooltip("Duration in ticks"),new I("Hide Equipment","hideEquipment",!1).setTooltip("Whether to hide equipment or not. Requires ProtocolLib.")],summaryItems:["duration","hideEquipment"]})}};r(Es,"new",()=>new Es);let el=Es;const $s=class $s extends O{constructor(){super({name:"Item",description:"Gives each player target the item defined by the settings",data:[...Oo()],summaryItems:["material","amount"]})}};r($s,"new",()=>new $s);let tl=$s;const Ps=class Ps extends O{constructor(){super({name:"Item Drop",description:"Spawns a dropped item defined by the settings at the specified location",data:[new g("Pickup Delay","pickup_delay",10).setTooltip("How many ticks must pass before the item can be picked up, in ticks"),new g("Duration","duration",6e3).setTooltip("The time after which the item will despawn if not picked up, in ticks. Caps at 6000"),...Oo(),new re("Offset"),new g("Forward offset","forward").setTooltip("How far forward in blocks to teleport. A negative value teleports backwards"),new g("Upward offset","upward").setTooltip("How far upward in blocks to teleport. A negative value teleports downward"),new g("Right offset","right").setTooltip("How far to the right in blocks to teleport. A negative value teleports to the left")],summaryItems:["pickup_delay","duration","material","amount"]})}};r(Ps,"new",()=>new Ps);let al=Ps;const Vs=class Vs extends O{constructor(){super({name:"Item Projectile",description:"Launches a projectile using an item as its visual that applies child components upon landing. The target passed on will be the collided target or the location where it landed if it missed",data:[new b("Group","group",["Ally","Enemy"],"Enemy").setTooltip("The alignment of targets to hit"),...Oo(),...nr(),...Fo(!0)],summaryItems:["group","material","velocity","spread","angle"]},!0)}};r(Vs,"new",()=>new Vs);let sl=Vs;const qs=class qs extends O{constructor(){super({name:"Item Remove",description:"Removes an item from a player inventory. This does nothing to mobs",data:[new g("Amount","amount",1).setTooltip("The amount of the item needed in the player's inventory"),...Me()],summaryItems:["amount","material"]},!1)}};r(qs,"new",()=>new qs);let ol=qs;const Os=class Os extends O{constructor(){super({name:"Launch",description:"Launches the target relative to their forward direction. Use negative values to go in the opposite direction (e.g. negative forward makes the target go backwards)",data:[new b("Relative","relative",["Target","Caster","Between"],"Target").setTooltip('Determines what is considered "forward". Target uses the direction the target is facing, Caster uses the direction the caster is facing, and Between uses the direction from the caster to the target'),new g("Forward Speed","forward").setTooltip("The speed to give the target in the direction they are facing"),new g("Upward Speed","upward",2,.5).setTooltip("The speed to give the target upwards"),new g("Right Speed","right").setTooltip("The speed to give the target to their right")],summaryItems:["relative","forward","upward","right"]},!1)}};r(Os,"new",()=>new Os);let nl=Os;const Ls=class Ls extends O{constructor(){super({name:"Lightning",description:"Strikes lightning on or near the target, applying child components to the struck targets. Negative offsets will offset it in the opposite direction (e.g. negative forward offset puts it behind the target)",data:[new g("Damage","damage",5).setTooltip("The damage dealt by the lightning bolt"),new b("Group","group",["Ally","Enemy","Both"],"Enemy").setTooltip("The alignment of targets to hit"),new I("Include Caster","caster").setTooltip("Whether the lightning strike can hit the caster"),new I("Fire","fire",!0).setTooltip("Whether the lightning should start a fire on hit"),new re("Offset"),new g("Forward Offset","forward").setTooltip("How far in front of the target in blocks to place the lightning"),new g("Right Offset","right").setTooltip("How far to the right of the target in blocks to place the lightning")],summaryItems:["damage","group","caster","fire"]},!0)}};r(Ls,"new",()=>new Ls);let il=Ls;const Fs=class Fs extends O{constructor(){super({name:"Mana",description:"Restores or deducts mana from the target",data:[new b("Type","type",["Mana","Percent"],"Mana").setTooltip("The unit to use for the amount of mana to restore/drain. Mana does a flat amount while Percent does a percentage of their max mana"),new g("Value","value",1).setTooltip("The amount of mana to restore/drain")],summaryItems:["type","value"]},!1)}};r(Fs,"new",()=>new Fs);let ll=Fs;const Rs=class Rs extends O{constructor(){super({name:"Message",description:"Sends a message to each player target. To include numbers from Value mechanics, use the filters {<key>} where <key> is the key the value is stored under",data:[new N("Message","message","text").setTooltip(`The message to display. {player} = caster's name, {target} = target's name, {targetUUID} = target's UUID (useful if targets are non players), &lc: "{", &rc: "}", &sq: "'"`)],summaryItems:["message"]})}};r(Rs,"new",()=>new Rs);let rl=Rs;const Ns=class Ns extends O{constructor(){super({name:"Mine",description:"Destroys a selection of blocks at the location of the target",data:[new b("Material","materials",()=>["Origin","Any",...ze()],["Origin"],!0).setTooltip("The types of blocks allowed to be broken. 'Origin' refers to the material at the targeted location"),new I("Drop","drop",!0).setTooltip("Whether to create drops for the destroyed blocks"),new b("Tool","tool",()=>["Caster","Target",...nt()],"Diamond pickaxe").requireValue("drop",[!0]).setTooltip("What tool to use when breaking the blocks. This allows to take into account the fact that, for example, Diamond Ore does not drop when mined with a Stone Pickaxe, as well as to consider enchantments like Looting and Silk Touch. 'Caster' an 'Target' refers to the items in their respective main hands"),new b("Shape","shape",["Sphere","Cuboid"],"Sphere").setTooltip("The shape of the region to mine"),new g("Radius","radius",2).requireValue("shape",["Sphere"]).setTooltip("The radius of the sphere, in blocks"),new g("Width (X)","width",3).requireValue("shape",["Cuboid"]).setTooltip("The width of the cuboid, in blocks"),new g("Height (Y)","height",3).requireValue("shape",["Cuboid"]).setTooltip("The height of the cuboid, in blocks"),new g("Depth (Z)","depth",3).requireValue("shape",["Cuboid"]).setTooltip("The depth of the cuboid, in blocks"),new re("Offset"),new g("Forward Offset","forward").setTooltip("How far forward in front of the target the region should be in blocks. A negative value will put it behind"),new g("Upward Offset","upward").setTooltip("How far above the target the region should be in blocks. A negative value will put it below"),new g("Right Offset","right").setTooltip("How far to the right the region should be of the target. A negative value will put it to the left")],preview:[..._e(),new I("Center only","per-target-center-only",!0).setTooltip("Whether to display particles only at the center of the affected area, or at each affected block").requireValue("per-target",[!0])],summaryItems:["materials","drop","tool","shape","radius"]})}};r(Ns,"new",()=>new Ns);let cl=Ns;const xs=class xs extends O{constructor(){super({name:"Money",description:"Adds or multiplies the target's balance by some amount (requires Vault and an economy plugin). Fails if the resulting balance is not within the range allowed by the economy plugin",data:[new b("Type","type",["Add","Multiply"],"Add").setTooltip("Whether the target's balance will be added or multiplied by the set amount"),new g("Amount","amount",5).setTooltip("The amount that the target's balance will be added or multiplied by. Can be negative"),new I("Allows negative","allows_negative").setTooltip("Whether the mechanic will be executed even if it will result in the target having a negative balance")],summaryItems:["type","amount"]})}};r(xs,"new",()=>new xs);let ul=xs;const Cs=class Cs extends O{constructor(){super({name:"Particle",description:"Plays a particle effect about the target",data:[...Lo(),new re("Offset"),new x("Forward Offset","forward").setTooltip("How far forward in front of the target in blocks to play the particles. A negative value will go behind"),new x("Upward Offset","upward").setTooltip("How far above the target in blocks to play the particles. A negative value will go below"),new x("Right Offset","right").setTooltip("How far to the right of the target to play the particles. A negative value will go to the left")],summaryItems:["particle","amount","spread","dust-color"]})}};r(Cs,"new",()=>new Cs);let pl=Cs;const Hs=class Hs extends O{constructor(){super({name:"Particle Animation",description:"Plays an animated particle effect at the location of each target over time by applying various transformations",data:[new ae("Steps","steps",1).setTooltip("The number of times to play particles and apply translations each application"),new x("Frequency","frequency",.05).setTooltip("How often to apply the animation in seconds. 0.05 is the fastest (1 tick). Lower than that will act the same"),new ae("Angle","angle",0).setTooltip("How far the animation should rotate over the duration in degrees"),new ae("Start Angle","start",0).setTooltip("The starting orientation of the animation. Horizontal translations and the forward/right offsets will be based off of this"),new g("Duration","duration",5).setTooltip("How long the animation should last for in seconds"),new g("H-Translation","h-translation").setTooltip("How far the animation moves horizontally relative to the center over a cycle. Positive values make it expand from the center while negative values make it contract"),new g("V-Translation","v-translation").setTooltip("How far the animation moves vertically over a cycle. Positive values make it rise while negative values make it sink"),new ae("H-Cycles","h-cycles",1).setTooltip("How many times to move the animation position throughout the animation. Every other cycle moves it back to where it started. For example, two cycles would move it out and then back in"),new ae("V-Cycles","v-cycles",1).setTooltip("How many times to move the animation position throughout the animation. Every other cycle moves it back to where it started. For example, two cycles would move it up and then back down"),...Lo(),new re("Offset"),new x("Forward Offset","forward",0).setTooltip("How far forward in front of the target in blocks to play the particles. A negative value will go behind"),new x("Upward Offset","upward",0).setTooltip("How far above the target in blocks to play the particles. A negative value will go below"),new x("Right Offset","right",0).setTooltip("How far to the right of the target to play the particles. A negative value will go to the left"),new I("Rotate w/ Player","-with-rotation").setTooltip("Whether to follow the rotation of the player for the effect")],summaryItems:["steps","frequency","angle","duration","particle","amount","spread","dust-color"]})}};r(Hs,"new",()=>new Hs);let hl=Hs;const Ws=class Ws extends O{constructor(){super({name:"Particle Effect",description:"Plays a particle effect that follows the current target, using formulas to determine shape, size, and motion",data:[...Fo(!1)],summaryItems:["effect-key","-particle","-particle-dust-color"]})}};r(Ws,"new",()=>new Ws);let ml=Ws;const Bs=class Bs extends O{constructor(){super({name:"Particle Projectile",description:"Launches a projectile using particles as its visual that applies child components upon landing. The target passed on will be the collided target or the location where it landed if it missed",data:[new x("Gravity","gravity").setTooltip("How much gravity to apply each tick. Negative values make it fall while positive values make it rise"),new I("Pierce","pierce").setTooltip("Whether this projectile should pierce through initial targets and continue hitting those behind them"),new b("Group","group",["Ally","Enemy"],"Enemy").setTooltip("The alignment of targets to hit"),...nr(),...Lo(),new x("Frequency","frequency",.05).setTooltip("How often to play a particle effect where the projectile is. It is recommended not to change this value unless there are too many particles playing"),...Fo(!0)],summaryItems:["gravity","pierce","group","particle","amount","spread","frequency","dust-color"]},!0)}};r(Bs,"new",()=>new Bs);let dl=Bs;const Us=class Us extends O{constructor(){super({name:"Passive",description:"Applies child components continuously every period. The seconds value below is the period or how often it applies",data:[new g("Seconds","seconds",1).setTooltip("The delay in seconds between each application")],summaryItems:["seconds"]},!0)}};r(Us,"new",()=>new Us);let fl=Us;const Gs=class Gs extends O{constructor(){super({name:"Permission",description:"Grants each player target a permission for a limited duration. This mechanic requires Vault with an accompanying permissions plugin in order to work",data:[new N("Permission","perm","plugin.perm.key").setTooltip("The permission to give to the player"),new g("Seconds","seconds",3).setTooltip("How long in seconds to give the permission to the player")],summaryItems:["perm","seconds"]})}};r(Gs,"new",()=>new Gs);let gl=Gs;const js=class js extends O{constructor(){super({name:"Potion",description:"Applies a potion effect to the target for a duration",data:[new b("Potion","potion",sc,"Absorption").setTooltip("The type of potion effect to apply"),new I("Ambient Particles","ambient",!0).setTooltip("Whether to show ambient particles"),new g("Tier","tier",1).setTooltip("The strength of the potion"),new g("Seconds","seconds",3,1).setTooltip("How long to apply the effect for")],summaryItems:["potion","tier","seconds"]},!1)}};r(js,"new",()=>new js);let wl=js;const zs=class zs extends O{constructor(){super({name:"Potion Projectile",description:"Drops a splash potion from each target that does not apply potion effects by default. This will apply child elements when the potion lands. The targets supplied will be everything hit by the potion. If nothing is hit by the potion, the target will be the location it landed",data:[new Oe("Color","color","#ff0000").setTooltip("The hex color code to use for the potion"),new b("Group","group",["Ally","Enemy","Both"],"Enemy").setTooltip("The alignment of entities to hit"),new I("Linger","linger",!1).setTooltip("Whether the potion should be a lingering potion (for 1.9+ only)")],summaryItems:["color","group","linger"]},!0)}};r(zs,"new",()=>new zs);let yl=zs;const Ys=class Ys extends O{constructor(){super({name:"Projectile",description:"Launches a projectile that applies child components on hit. The target supplied will be the struck target",data:[new b("Projectile","projectile",Dc,"Arrow").setTooltip("The type of projectile to fire"),new I("Flaming","flaming",!1).setTooltip("Whether to make the launched projectiles on fire"),new b("Cost","cost",["None","All","One"],"None").setTooltip(`The item cost of the skill. "One" will only charge the player 1 item of it's type, whereas "All" will charge 1 for each fired projectile`),...nr(),...Lo(),...Fo(!0)],summaryItems:["projectile","flaming","cost","particle","amount","spread","dust-color","effect-key"]},!0)}};r(Ys,"new",()=>new Ys);let Tl=Ys;const Ks=class Ks extends O{constructor(){super({name:"Purge",description:"Purges the target of positive potion effects or statuses",data:[new b("Potion","potion",Ec,void 0,!0).setTooltip("The potion effect to remove from the target, if any"),new b("Status","status",["All","Absorb","Invincible"],["All"],!0).setTooltip("The status to remove from the target, if any")],summaryItems:["potion","status"]},!1)}};r(Ks,"new",()=>new Ks);let vl=Ks;const Xs=class Xs extends O{constructor(){super({name:"Push",description:"Pushes the target relative to the caster. This will do nothing if used with the caster as the target. Positive numbers apply knockback while negative numbers pull them in",data:[new b("Type","type",["Fixed","Inverse","Scaled"],"Fixed").setTooltip("How to scale the speed based on relative position. Fixed does the same speed to all targets. Inverse pushes enemies farther away faster. Scaled pushes enemies closer faster"),new g("Speed","speed",3,1).setTooltip("How fast to push the target away. Use a negative value to pull them closer"),new N("Source","source","none").setTooltip("The source to push/pull from. This should be a key used in a Remember Targets mechanic. If no targets are remembered, this will default to the caster")],summaryItems:["type","speed"]},!1)}};r(Xs,"new",()=>new Xs);let bl=Xs;const Zs=class Zs extends O{constructor(){super({name:"Remember Targets",description:"Stores the current targets for later use under a specified key",data:[new N("Key","key","target").setTooltip('The unique key to store the targets under. The "Remember" target will use this key to apply effects to the targets later on')],summaryItems:["key"]},!1)}};r(Zs,"new",()=>new Zs);let kl=Zs;const Js=class Js extends O{constructor(){super({name:"Repeat",description:"Applies child components multiple times. When it applies them is determined by the delay (seconds before the first application) and period (seconds between successive applications)",data:[new g("Repetitions","repetitions",3).setTooltip("How many times to activate child components"),new x("Period","period",1).setTooltip("The time in seconds between each time applying child components"),new x("Delay","delay").setTooltip("The initial delay before starting to apply child components"),new I("Stop on Fail","stop-on-fail",!1).setTooltip("Whether to stop the repeat task early if the effects fail")],summaryItems:["repetitions","period","delay","stop-on-fail"]},!0)}};r(Js,"new",()=>new Js);let _l=Js;const Qs=class Qs extends O{constructor(){super({name:"Signal Emit",description:"Send a custom signal to all target that can be reused and processed separately.",data:[new N("Signal","signal").setTooltip("The name of signal will be emit."),new I("Self-handling","handler",!1).setTooltip(`
If true, the signal will be sent to the caster itself and the target are the current targets.
 If false, a signal is sent to each target and the target is caster`),new Ve("Arguments","argument").setTooltip("Arguments used for signal processing. One value per line. The value will be stored in value api-arg[<index>]. The first value will be specially stored at api-arg")],summaryItems:["signal","handler","argument"]},!0)}};r(Qs,"new",()=>new Qs);let Il=Qs;const Ms=class Ms extends O{constructor(){super({name:"Skill cast",description:"Make target cast other skill. Applicable to players only!",data:[new b("Cast mode","mode",["All","First","Random"],"All").setTooltip("Choose which skills to cast (excluding unavailable skills)."),new I("Force cast","force",!1).setTooltip("True if player will cast regardless of whether they have that skill or not"),new Ve("Skills","skills").setTooltip('The list of skills.Each skill can come with the level like "example skill:3". If player has skill, level will is available level. Else, level is 1.')],summaryItems:["mode","force","skills"]},!1)}};r(Ms,"new",()=>new Ms);let Al=Ms;const eo=class eo extends O{constructor(){super({name:"Sound",description:"Plays a sound at the target's location",data:[new b("Sound","sound",()=>["Custom",...$c()],"Ambient Cave").setTooltip("The sound clip to play. Select 'Custom' to enter custom sounds from your resource pack"),new N("Custom sound name","custom","myrp:some_sound").requireValue("sound",["Custom"]).setTooltip("Namespaced key of your custom sound"),new g("Volume","volume",100).setTooltip("The volume of the sound as a percentage. Numbers above 100 will not get any louder, but will be heard from a farther distance"),new g("Pitch","pitch",1).setTooltip("The pitch of the sound as a numeric speed multiplier between 0.5 and 2")],summaryItems:["sound","volume","pitch"]},!1)}};r(eo,"new",()=>new eo);let Sl=eo;const to=class to extends O{constructor(){super({name:"Stat",description:"Gives a player bonus stat temporarily",data:[new N("Stat","key","health").setTooltip("The name of the stat to add to"),new b("Operation","operation",["ADD_NUMBER","MULTIPLY_PERCENTAGE"],"ADD_NUMBER").setTooltip("The operation on the original value by amount, ADD_NUMBER: Scalar adding, MULTIPLY_PERCENTAGE: Multiply the value by amount"),new g("Amount","amount",5,2).setTooltip("The amount to use with the operation"),new g("Seconds","seconds",3).setTooltip("How long in seconds to give the stat to the player"),new I("Stackable","stackable").setTooltip("Whether applying multiple times stacks the effects")],summaryItems:["key","operation","amount","seconds"]})}};r(to,"new",()=>new to);let Dl=to;const ao=class ao extends O{constructor(){super({name:"Status",description:"Applies a status effect to the target for a duration",data:[new b("Status","status",["Absorb","Curse","Disarm","Invincible","Root","Silence","Stun"],"Stun").setTooltip("The status to apply"),new g("Duration","duration",3,1).setTooltip("How long in seconds to apply the status")],summaryItems:["status","duration"]})}};r(ao,"new",()=>new ao);let El=ao;const so=class so extends O{constructor(){super({name:"Taunt",description:"Draws aggro of targeted creatures. Regular mobs are set to attack the caster. The Spigot/Bukkit API for this was not functional on older versions, so it may not work on older servers. For MythicMobs, this uses their aggro system using the amount chosen below",data:[new g("Amount","amount",1).setTooltip("The amount of aggro to apply if MythicMobs is active. Use negative amounts to reduce aggro")],summaryItems:["amount"]},!1)}};r(so,"new",()=>new so);let $l=so;const oo=class oo extends O{constructor(){super({name:"Trigger",description:"Listens for a trigger on the current targets for a duration",data:[new b("Trigger","trigger",()=>Object.values(Se(Ke.triggers)).map(e=>e.name),"Death").setTooltip("The trigger to listen for"),new g("Duration","duration",5).setTooltip("How long to listen to the trigger for"),new I("Stackable","stackable",!0).setTooltip("Whether different players (or the same player) can listen to the same target at the same time"),new I("Once","once",!0).setTooltip("Whether the trigger should only be used once each cast. When false, the trigger can execute as many times as it happens for the duration"),new b("Material","material",Pc,["Any"],!0).requireValue("trigger",["Block Break","Block Place"]).setTooltip("The type of block expected to be handled"),new ae("Data","data",-1).requireValue("trigger",["Block Break","Block Place"]).setTooltip("The expected data value of the block (-1 for any data value)"),new b("Crouch","crouch",["Crouch","Dont crouch","Both"],"Crouch").requireValue("trigger",["Left Click","Right Click"]).setTooltip("If the player has to be crouching in order for this trigger to function"),new b("Type","type",["Start Crouching","Stop Crouching","Both"],"Start Crouching").requireValue("trigger",["Crouch"]).setTooltip("Whether you want to apply components when crouching or not crouching"),new b("Drop multiple","drop multiple",["True","False","Ignore"],"Ignore").requireValue("trigger",["Drop Item"]).setTooltip("Whether the player has to drop multiple items or a single item"),new b("Type","type",tr,"FALL").requireValue("trigger",["Environment Damage"]).setTooltip("The source of damage to apply for"),new I("Cancel swap","cancel",!0).requireValue("trigger",["Item Swap"]).setTooltip("True cancels the item swap. False allows the item swap"),new x("Min Distance","min-distance",0).requireValue("trigger",["Land"]).setTooltip("The minimum distance the player should fall before effects activating"),new b("Type","type",Eo(),"Any").requireValue("trigger",["Launch"]).setTooltip("The type of projectile that should be launched"),new b("Type","type",["Both","Melee","Projectile"],"Both").requireValue("trigger",["Physical Damage","Took Physical Damage"]).setTooltip("The type of damage dealt"),new N("Category","category","").requireValue("trigger",["Skill Damage","Took Skill Damage"]).setTooltip("The type of skill damage to apply for. Leave this empty to apply to all skill damage"),new I("Target Listen Target","target",!0).requireValue("trigger",["Physical Damage","Skill Damage","Took Physical Damage","Took Skill Damage"]).setTooltip("True makes children target the target that has been listened to. False makes children target the entity fighting the target entity"),new x("Min Damage","dmg-min",0).requireValue("trigger",["Physical Damage","Skill Damage","Took Physical Damage","Took Skill Damage"]).setTooltip("The minimum damage that needs to be dealt"),new x("Max Damage","dmg-max",999).requireValue("trigger",["Physical Damage","Skill Damage","Took Physical Damage","Took Skill Damage"]).setTooltip("The maximum damage that needs to be dealt"),new N("Signal","signal","").requireValue("trigger",["Signal"]).setTooltip("The name of signal will be listened to")],summaryItems:["trigger","duration","once","signal"]},!0)}};r(oo,"new",()=>new oo);let Pl=oo;const no=class no extends O{constructor(){super({name:"Value Add",description:"Adds to a stored value under a unique key for the caster. If the value wasn't set before, this will set the value to the given amount",data:[new N("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new g("Amount","amount",1).setTooltip("The amount to add to the value")],summaryItems:["key","amount"]},!1)}};r(no,"new",()=>new no);let Vl=no;const io=class io extends O{constructor(){super({name:"Value Attribute",description:"Loads a player's attribute count for a specific attribute as a stored value to be used in other mechanics",data:[new N("Key","key","attribute").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new N("Attribute","attribute","Vitality").setTooltip("The name of the attribute you are loading the value of")],summaryItems:["key","attribute"]},!1)}};r(io,"new",()=>new io);let ql=io;const lo=class lo extends O{constructor(){super({name:"Value Copy",description:"Copies a stored value from the caster to the target or vice versa",data:[new N("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new N("Destination","destination","value").setTooltip("The key to copy the original value to"),new I("To target","to-target",!0).setTooltip("The amount to add to the value")],summaryItems:["key","destination","to-target"]},!1)}};r(lo,"new",()=>new lo);let Ol=lo;const ro=class ro extends O{constructor(){super({name:"Value Distance",description:"Stores the distance between the target and the caster into a value",data:[new N("Key","key","attribute").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value")],summaryItems:["key"]},!1)}};r(ro,"new",()=>new ro);let Ll=ro;const co=class co extends O{constructor(){super({name:"Value Health",description:"Stores the target's current health as a value under a given key for the caster",data:[new N("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new b("Type","type",["Current","Max","Missing","Percent"],"Current").setTooltip("Current provides the health the target has, max provides their total health, missing provides how much health they have lost, and percent is the ratio of health to total health")],summaryItems:["key","type"]},!1)}};r(co,"new",()=>new co);let Fl=co;const uo=class uo extends O{constructor(){super({name:"Value Location",description:"Loads the first target's current location into a stored value for use at a later time",data:[new N("Key","key","location").setTooltip("The unique key to store the location under. This key can be used in place of attribute values to use the stored value")],summaryItems:["key"]},!1)}};r(uo,"new",()=>new uo);let Rl=uo;const po=class po extends O{constructor(){super({name:"Value Lore",description:"Loads a value from a held item's lore into a stored value under the given unique key for the caster",data:[new N("Key","key","lore").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new b("Hand","hand",["Main","Offhand"],"Main").setTooltip("The hand to check for the item. Offhand items are MC 1.9+ only"),new N("Regex","regex","Damage: {value}").setTooltip("The regex string to look for, using {value} as the number to store. If you do not know about regex, consider looking it up on Wikipedia or avoid using major characters such as [ ] { } ( ) . + ? * ^ \\ |"),new g("Multiplier","multiplier",1).setTooltip("The multiplier for the acquired value. If you want the value to remain unchanged, leave this value at 1")],summaryItems:["key","hand","regex","multiplier"]},!1)}};r(po,"new",()=>new po);let Nl=po;const ho=class ho extends O{constructor(){super({name:"Value Lore Slot",description:"Loads a value from an item's lore into a stored value under the given unique key for the caster",data:[new N("Key","key","lore").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new ae("Slot","slot",9).setTooltip("The slot of the inventory to fetch the item from. Slots 0-8 are the hotbar, 9-35 are the main inventory, 36-39 are armor, and 40 is the offhand slot"),new N("Regex","regex","Damage: {value}").setTooltip("The regex string to look for, using {value} as the number to store. If you do not know about regex, consider looking it up on Wikipedia or avoid using major characters such as [ ] { } ( ) . + ? * ^ \\ |"),new g("Multiplier","multiplier",1).setTooltip("The multiplier for the acquired value. If you want the value to remain unchanged, leave this value at 1")],summaryItems:["key","slot","regex","multiplier"]},!1)}};r(ho,"new",()=>new ho);let xl=ho;const mo=class mo extends O{constructor(){super({name:"Value Mana",description:"Stores the target player's current mana as a value under a given key for the caster",data:[new N("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new b("Type","type",["Current","Max","Missing","Percent"],"Current").setTooltip("Current provides the mana the target has, max provides their total mana, missing provides how much mana they have lost, and percent is the ratio of health to total mana")],summaryItems:["key","type"]},!1)}};r(mo,"new",()=>new mo);let Cl=mo;const fo=class fo extends O{constructor(){super({name:"Value Multiply",description:"Multiplies a stored value under a unique key for the caster. If the value wasn't set before, this will not do anything",data:[new N("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new g("Multiplier","multiplier",1).setTooltip("The amount to multiply the value by")],summaryItems:["key","multiplier"]},!1)}};r(fo,"new",()=>new fo);let Hl=fo;const go=class go extends O{constructor(){super({name:"Value Placeholder",description:"Uses a placeholder string and stores it as a value for the caster",data:[new N("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new b("Type","type",["Number","String"],"Number").setTooltip("The type of value to store. Number values require numeric placeholders. String values can be used in messages or commands"),new N("Placeholder","placeholder","{value}").setTooltip("The placeholder string to use. Can contain multiple placeholders if using the String type")],summaryItems:["key","type","placeholder"]},!1)}};r(go,"new",()=>new go);let Wl=go;const wo=class wo extends O{constructor(){super({name:"Value Random",description:"Stores a specified value under a given key for the caster",data:[new N("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new I("Integer","integer",!1).setTooltip("Whether to only generate integer values"),new b("Type","type",["Normal","Triangular"],"Normal").setTooltip("The type of random to use. Triangular favors numbers in the middle, similar to rolling two dice"),new g("Min","min").setTooltip("The minimum value it can be"),new g("Max","max").setTooltip("The maximum value it can be")],summaryItems:["key","type","min","max"]},!1)}};r(wo,"new",()=>new wo);let Bl=wo;const yo=class yo extends O{constructor(){super({name:"Value Set",description:"Stores a specified value under a given key for the caster",data:[new N("Key","key","value").setTooltip("The unique key to store the value under. This key can be used in place of attribute values to use the stored value"),new g("Value","value",1).setTooltip("The value to store under the key")],summaryItems:["key","value"]},!1)}};r(yo,"new",()=>new yo);let Ul=yo;const To=class To extends O{constructor(){super({name:"Warp",description:"Warps the target relative to their forward direction. Use negative numbers to go in the opposite direction (e.g. negative forward will cause the target to warp backwards)",data:[new I("Through Walls","walls").setTooltip("Whether to allow the target to teleport through walls"),new re("Position"),new g("Forward","forward",3,1).setTooltip("How far forward in blocks to teleport. A negative value teleports backwards"),new g("Upward","upward").setTooltip("How far upward in blocks to teleport. A negative value teleports downward"),new g("Right","right").setTooltip("How far to the right in blocks to teleport. A negative value teleports to the left")],preview:[..._e()],summaryItems:["walls","forward","upward","right"]},!1)}};r(To,"new",()=>new To);let Gl=To;const vo=class vo extends O{constructor(){super({name:"Warp Location",description:"Warps the target to a specified location",data:[new N('World (or "current")',"world","current").setTooltip("The name of the world that the location is in"),new x("X","x",0).setTooltip("The X-coordinate of the desired position"),new x("Y","y",0).setTooltip("The Y-coordinate of the desired position"),new x("Z","z",0).setTooltip("The Z-coordinate of the desired position"),new x("Yaw","yaw",0).setTooltip("The Yaw of the desired position (left/right orientation)"),new x("Pitch","pitch",0).setTooltip("The Pitch of the desired position (up/down orientation)")],preview:[..._e()],summaryItems:["world","x","y","z"]},!1)}};r(vo,"new",()=>new vo);let jl=vo;const bo=class bo extends O{constructor(){super({name:"Warp Random",description:"Warps the target in a random direction the given distance",data:[new I("Only Horizontal","horizontal",!0).setTooltip("Whether to limit the random position to the horizontal plane"),new I("Through Walls","walls",!1).setTooltip("Whether to allow the target to teleport through walls"),new g("Distance","distance",3,1).setTooltip("The max distance in blocks to teleport")],summaryItems:["horizontal","walls","distance"]},!1)}};r(bo,"new",()=>new bo);let zl=bo;const ko=class ko extends O{constructor(){super({name:"Warp Swap",description:"Switches the location of the caster and the target. If multiple targets are provided, this takes the first one"})}};r(ko,"new",()=>new ko);let Yl=ko;const _o=class _o extends O{constructor(){super({name:"Warp Target",description:"Warps either the target or the caster to the other. This does nothing when the target is the caster",data:[new b("Type","type",["Caster to Target","Target to Caster"],"Caster to Target").setTooltip("The direction to warp the involved targets")],summaryItems:["type"]})}};r(_o,"new",()=>new _o);let Kl=_o;const Io=class Io extends O{constructor(){super({name:"Warp Value",description:"Warps all targets to a location remembered using the Value Location mechanic",data:[new N("Key","key","location").setTooltip("The unique key the location is stored under. This should be the same key used in the Value Location mechanic")],preview:[..._e()],summaryItems:["key"]},!1)}};r(Io,"new",()=>new Io);let Xl=Io;const Ao=class Ao extends O{constructor(){super({name:"Wolf",description:"Summons a wolf on each target for a duration. Child components will start off targeting the wolf so you can add effects to it. You can also give it its own skillset, though Cast triggers will not occur",data:[new b("Collar Color","color",Vc,"Black").setTooltip("The color of the collar that the wolf should wear"),new N("Wolf Name","name","{player}'s Wolf").setTooltip("The displayed name of the wolf. Use {player} to embed the caster's name"),new g("Health","health",10).setTooltip("The starting health of the wolf"),new g("Damage","damage",3).setTooltip("The damage dealt by the wolf each attack"),new I("Sitting","sitting",!1).setTooltip("Whether the wolf starts off sitting"),new g("Duration","seconds",10).setTooltip("How long to summon the wolf for"),new g("Amount","amount",1).setTooltip("How many wolves to summon"),new Vo("Skills","skills",!0).setTooltip("The skills to give the wolf. Skills are executed at the level of the skill summoning the wolf. Skills needing a Cast trigger will not work")],summaryItems:["color","name","seconds","amount"]},!0)}};r(Ao,"new",()=>new Ao);let Zl=Ao;const Le=s=>[new ae("Refresh period",s+"-period",5).requireValue(s,[!0]).setTooltip("How many ticks to wait before refreshing the preview, recalculating targets and the location of the particle effects"),new b("Particle",s+"-particle",ar,"Crit").setTooltip("The type of particle to display").requireValue(s,[!0]),new b("Material",s+"-material",()=>[...nt()],"Arrow").requireValue(s+"-particle",["Item crack"]).requireValue(s,[!0]).setTooltip("The material to use for the particles"),new b("Material",s+"-material",()=>[...ze()],"Dirt").requireValue(s+"-particle",["Block crack","Block dust","Falling dust","Block marker"]).requireValue(s,[!0]).setTooltip("The block to use for the particles"),new ae("Durability",s+"-durability",0).requireValue(s+"-particle",["Item crack"]).requireValue(s,[!0]).setTooltip("The durability to be reduced from the item used to make the particles"),new ae("CustomModelData",s+"-type",0).requireValue(s+"-particle",["Item crack"]).requireValue(s,[!0]).setTooltip("The CustomModelData of the item used to make the particles"),new Oe("Dust Color",s+"-dust-color","#FF0000").requireValue(s+"-particle",["Redstone","Dust color transition"]).requireValue(s,[!0]).setTooltip("The color of the dust particles in hex RGB"),new Oe("Final Dust Color",s+"-final-dust-color","#FF0000").requireValue(s+"-particle",["Dust color transition"]).requireValue(s,[!0]).setTooltip("The color to transition to, in hex RGB"),new x("Dust Size",s+"-dust-size",1).requireValue(s+"-particle",["Redstone","Dust color transition"]).requireValue(s,[!0]).setTooltip("The size of the dust particles"),new ae("Effect Data",s+"-data").requireValue(s+"-particle",["Smoke","Ender Signal","Mobspawner Flames","Potion Break","Sculk charge"]).requireValue(s,[!0]).setTooltip("The data value to use for the particle. The effect changes between particles such as the orientation for smoke particles or the color for potion break"),new x("DX",s+"-dx").requireValue(s,[!0]).setTooltip("Offset in the X direction, used as the Red value for some particles"),new x("DY",s+"-dy").requireValue(s,[!0]).setTooltip("Offset in the Y direction, used as the Green value for some particles"),new x("DZ",s+"-dz").requireValue(s,[!0]).setTooltip("Offset in the Z direction, used as the Blue value for some particles"),new x("Amount",s+"-amount",1).requireValue(s,[!0]).setTooltip('Number of particles to play per point. For "Spell mob" and "Spell mob ambient" particles, set to 0 to control the particle color'),new x("Speed",s+"-speed",.1).requireValue(s,[!0]).setTooltip("Speed of the particle. For some particles controls other parameters, such as size")],rp=()=>{Ke.triggers.set({ARMOR_EQUIP:{name:"Armor Equip",component:Wo},BLOCK_BREAK:{name:"Block Break",component:Bo},BLOCK_PLACE:{name:"Block Place",component:Uo},CAST:{name:"Cast",component:Go},CHAT:{name:"Chat",component:jo},CONSUME:{name:"Consume",component:Tn},CLEANUP:{name:"Cleanup",component:zo},CROUCH:{name:"Crouch",component:Yo},DEATH:{name:"Death",component:Ko},DROP_ITEM:{name:"Drop Item",component:Xo},ENV_DAMAGE:{name:"Environment Damage",component:Zo},FISHING:{name:"Fishing",component:Jo},FISHING_BITE:{name:"Fishing Bite",component:Qo},FISHING_FAIL:{name:"Fishing Fail",component:Mo},FISHING_GRAB:{name:"Fishing Grab",component:en},FISHING_GROUND:{name:"Fishing Ground",component:tn},FISHING_REEL:{name:"Fishing Reel",component:an},HEAL:{name:"Heal",component:vn},INIT:{name:"Initialize",component:sn},ITEM_SWAP:{name:"Item Swap",component:on},KILL:{name:"Kill",component:nn},LAND:{name:"Land",component:ln},LAUNCH:{name:"Launch",component:rn},LEFT_CLICK:{name:"Left Click",component:cn},RIGHT_CLICK:{name:"Right Click",component:dn},MOVE:{name:"Move",component:un},PHYS_DAMAGE:{name:"Physical Damage",component:pn},PROJ_HIT:{name:"Projectile Hit",component:hn},PROJ_TICK:{name:"Projectile Launch",component:mn},SIGNAL:{name:"Signal",component:kn},SHIELD:{name:"Shield",component:bn},SKILL_DAMAGE:{name:"Skill Damage",component:gn},SKILL_CAST:{name:"Skill Cast",component:fn},TOOK_PHYS:{name:"Took Physical Damage",component:wn},TOOK_SKILL:{name:"Took Skill Damage",component:yn}}),Ke.targets.set({AREA:{name:"Area",component:_n},CONE:{name:"Cone",component:In},LINEAR:{name:"Linear",component:An},LOCATION:{name:"Location",component:Sn},NEAREST:{name:"Nearest",component:Dn},OFFSET:{name:"Offset",component:En},REMEMBER:{name:"Remember",component:$n},SELF:{name:"Self",component:Pn},SINGLE:{name:"Single",component:Vn}}),Ke.conditions.set({ALTITUDE:{name:"Altitude",component:qn},ARMOR:{name:"Armor",component:On},ATTRIBUTE:{name:"Attribute",component:Ln},BIOME:{name:"Biome",component:Fn},BLOCK:{name:"Block",component:Rn},BURNING:{name:"Burning",component:Nn},CEILING:{name:"Ceiling",component:xn},CHANCE:{name:"Chance",component:Cn},CLASS:{name:"Class",component:Hn},CLASS_LEVEL:{name:"Class Level",component:Wn},COMBAT:{name:"Combat",component:Bn},CROUCH:{name:"Crouch",component:Un},DIRECTION:{name:"Direction",component:Gn},DISTANCE:{name:"Distance",component:jn},ELEVATION:{name:"Elevation",component:zn},ELSE:{name:"Else",component:Yn},ENTITY_TYPE:{name:"Entity Type",component:Kn},FIRE:{name:"Fire",component:Xn},FLAG:{name:"Flag",component:Zn},FOOD:{name:"Food",component:Jn},GROUND:{name:"Ground",component:Qn},HEALTH:{name:"Health",component:Mn},INVENTORY:{name:"Inventory",component:ti},ITEM:{name:"Item",component:ei},LIGHT:{name:"Light",component:ai},MANA:{name:"Mana",component:si},MONEY:{name:"Money",component:oi},MOUNTED:{name:"Mounted",component:ni},MOUNTING:{name:"Mounting",component:ii},MYTHICMOB_TYPE:{name:"MythicMob Type",component:li},NAME:{name:"Name",component:ri},OFFHAND:{name:"Offhand",component:ci},PERMISSION:{name:"Permission",component:ui},POTION:{name:"Potion",component:pi},SKILL_LEVEL:{name:"Skill Level",component:hi},SLOT:{name:"Slot",component:mi},STATUS:{name:"Status",component:di},TIME:{name:"Time",component:fi},TOOL:{name:"Tool",component:gi},VALUE:{name:"Value",component:wi},VALUETEXT:{name:"Value Text",component:yi},WATER:{name:"Water",component:Ti},WEATHER:{name:"Weather",component:vi},WORLD:{name:"World",component:bi}}),Ke.mechanics.set({ARMOR:{name:"Armor",component:ki},ARMOR_STAND:{name:"Armor Stand",component:_i},ARMOR_STAND_POSE:{name:"Armor Stand Pose",component:Ii},ATTRIBUTE:{name:"Attribute",component:Ai},BLOCK:{name:"Block",component:Si},BUFF:{name:"Buff",component:Di},CANCEL:{name:"Cancel",component:Ei},CHANNEL:{name:"Channel",component:Pi},CLEANSE:{name:"Cleanse",component:Vi},COMMAND:{name:"Command",component:qi},COOLDOWN:{name:"Cooldown",component:Oi},DAMAGE:{name:"Damage",component:Li},DAMAGE_BUFF:{name:"Damage Buff",component:Fi},DAMAGE_LORE:{name:"Damage Lore",component:Ri},DEFENSE_BUFF:{name:"Defense Buff",component:Ni},DELAY:{name:"Delay",component:xi},DISGUISE:{name:"Disguise",component:Ci},DURABILITY:{name:"Durability",component:Hi},EXPERIENCE:{name:"Experience",component:Wi},EXPLOSION:{name:"Explosion",component:Bi},FIRE:{name:"Fire",component:Ui},FLAG:{name:"Flag",component:Gi},FLAG_CLEAR:{name:"Flag Clear",component:ji},FLAG_TOGGLE:{name:"Flag Toggle",component:zi},FOOD:{name:"Food",component:Yi},FORGET_TARGETS:{name:"Forget Targets",component:Ki},HEAL:{name:"Heal",component:Xi},HEALTH_SET:{name:"Health Set",component:Zi},HELD_ITEM:{name:"Held Item",component:Ji},IMMUNITY:{name:"Immunity",component:Qi},INTERRUPT:{name:"Interrupt",component:Mi},INVISIBILITY:{name:"Invisibility",component:el},ITEM:{name:"Item",component:tl},ITEM_DROP:{name:"Item Drop",component:al},ITEM_PROJECTILE:{name:"Item Projectile",component:sl},ITEM_REMOVE:{name:"Item Remove",component:ol},LAUNCH:{name:"Launch",component:nl},LIGHTNING:{name:"Lightning",component:il},MANA:{name:"Mana",component:ll},MESSAGE:{name:"Message",component:rl},MINE:{name:"Mine",component:cl},MONEY:{name:"Money",component:ul},PARTICLE:{name:"Particle",component:pl},PARTICLE_ANIMATION:{name:"Particle Animation",component:hl},PARTICLE_EFFECT:{name:"Particle Effect",component:ml},CANCEL_EFFECT:{name:"Cancel Effect",component:$i},PARTICLE_PROJECTILE:{name:"Particle Projectile",component:dl},PASSIVE:{name:"Passive",component:fl},PERMISSION:{name:"Permission",component:gl},POTION:{name:"Potion",component:wl},POTION_PROJECTILE:{name:"Potion Projectile",component:yl},PROJECTILE:{name:"Projectile",component:Tl},PURGE:{name:"Purge",component:vl},PUSH:{name:"Push",component:bl},REMEMBER_TARGETS:{name:"Remember Targets",component:kl},REPEAT:{name:"Repeat",component:_l},SIGNAL_EMIT:{name:"Signal Emit",component:Il},SKILL_CAST:{name:"Skill Cast",component:Al},SOUND:{name:"Sound",component:Sl},STAT:{name:"Stat",component:Dl},STATUS:{name:"Status",component:El},TAUNT:{name:"Taunt",component:$l},TRIGGER:{name:"Trigger",component:Pl},VALUE_ADD:{name:"Value Add",component:Vl},VALUE_ATTRIBUTE:{name:"Value Attribute",component:ql},VALUE_COPY:{name:"Value Copy",component:Ol},VALUE_DISTANCE:{name:"Value Distance",component:Ll},VALUE_HEALTH:{name:"Value Health",component:Fl},VALUE_LOCATION:{name:"Value Location",component:Rl},VALUE_LORE:{name:"Value Lore",component:Nl},VALUE_LORE_SLOT:{name:"Value Lore Slot",component:xl},VALUE_MANA:{name:"Value Mana",component:Cl},VALUE_MULTIPLY:{name:"Value Multiply",component:Hl},VALUE_PLACEHOLDER:{name:"Value Placeholder",component:Wl},VALUE_RANDOM:{name:"Value Random",component:Bl},VALUE_SET:{name:"Value Set",component:Ul},WARP:{name:"Warp",component:Gl},WARP_LOC:{name:"Warp Location",component:jl},WARP_RANDOM:{name:"Warp Random",component:zl},WARP_SWAP:{name:"Warp Swap",component:Yl},WARP_TARGET:{name:"Warp Target",component:Kl},WARP_VALUE:{name:"Warp Value",component:Xl},WOLF:{name:"Wolf",component:Zl}}),Ke.initialized.set(!0)};function Sr(s){let e,t,a,o,i,n,c,l,u,p,m,w,A,V,h,d,T,_,k=s[2]instanceof Ne&&Dr(s);return{c(){e=D("div"),k&&k.c(),t=B(),a=D("div"),o=D("span"),i=M("save"),c=B(),l=D("div"),u=D("span"),p=M("content_copy"),w=B(),A=D("div"),V=D("span"),h=M("delete"),this.h()},l(j){e=E(j,"DIV",{class:!0});var $=q(e);k&&k.l($),t=U($),a=E($,"DIV",{class:!0,title:!0});var L=q(a);o=E(L,"SPAN",{class:!0});var S=q(o);i=ee(S,"save"),S.forEach(y),L.forEach(y),c=U($),l=E($,"DIV",{class:!0,title:!0});var G=q(l);u=E(G,"SPAN",{class:!0});var F=q(u);p=ee(F,"content_copy"),F.forEach(y),G.forEach(y),w=U($),A=E($,"DIV",{class:!0,title:!0});var H=q(A);V=E(H,"SPAN",{class:!0});var z=q(V);h=ee(z,"delete"),z.forEach(y),H.forEach(y),$.forEach(y),this.h()},h(){v(o,"class","material-symbols-rounded"),v(a,"class","download svelte-okwike"),v(a,"title",n="Save "+(s[2].triggers?"Skill":"Class")),v(u,"class","material-symbols-rounded"),v(l,"class","clone svelte-okwike"),v(l,"title",m="Clone "+(s[2].triggers?"Skill":"Class")),v(V,"class","material-symbols-rounded"),v(A,"class","delete svelte-okwike"),v(A,"title",d="Delete "+(s[2].triggers?"Skill":"Class")),v(e,"class","buttons svelte-okwike")},m(j,$){Y(j,e,$),k&&k.m(e,null),f(e,t),f(e,a),f(a,o),f(o,i),f(e,c),f(e,l),f(l,u),f(u,p),f(e,w),f(e,A),f(A,V),f(V,h),T||(_=[J(a,"click",at(je(s[14]))),J(l,"click",at(je(s[15]))),J(A,"click",at(je(s[16])))],T=!0)},p(j,$){j[2]instanceof Ne?k?k.p(j,$):(k=Dr(j),k.c(),k.m(e,t)):k&&(k.d(1),k=null),$&4&&n!==(n="Save "+(j[2].triggers?"Skill":"Class"))&&v(a,"title",n),$&4&&m!==(m="Clone "+(j[2].triggers?"Skill":"Class"))&&v(l,"title",m),$&4&&d!==(d="Delete "+(j[2].triggers?"Skill":"Class"))&&v(A,"title",d)},d(j){j&&y(e),k&&k.d(),T=!1,Re(_)}}}function Dr(s){let e,t,a,o;return{c(){e=D("a"),t=D("span"),a=M("edit"),this.h()},l(i){e=E(i,"A",{href:!0,class:!0,title:!0});var n=q(e);t=E(n,"SPAN",{class:!0});var c=q(t);a=ee(c,"edit"),c.forEach(y),n.forEach(y),this.h()},h(){v(t,"class","material-symbols-rounded"),v(e,"href",o=xe+"/skill/"+s[2].name+"/edit"),v(e,"class","edit svelte-okwike"),v(e,"title","Edit Skill")},m(i,n){Y(i,e,n),f(e,t),f(t,a)},p(i,n){n&4&&o!==(o=xe+"/skill/"+i[2].name+"/edit")&&v(e,"href",o)},d(i){i&&y(e)}}}function cp(s){let e,t,a=s[2].name+"",o,i,n,c,l,u,p,m,w,A,V;return{c(){e=D("h3"),t=M("Do you really want to delete "),o=M(a),i=M("?"),n=B(),c=D("div"),l=D("div"),u=M("Cancel"),p=B(),m=D("div"),w=M("Delete"),this.h()},l(h){e=E(h,"H3",{});var d=q(e);t=ee(d,"Do you really want to delete "),o=ee(d,a),i=ee(d,"?"),d.forEach(y),n=U(h),c=E(h,"DIV",{class:!0});var T=q(c);l=E(T,"DIV",{class:!0});var _=q(l);u=ee(_,"Cancel"),_.forEach(y),p=U(T),m=E(T,"DIV",{class:!0});var k=q(m);w=ee(k,"Delete"),k.forEach(y),T.forEach(y),this.h()},h(){v(l,"class","button svelte-okwike"),v(m,"class","button modal-delete svelte-okwike"),v(c,"class","modal-buttons svelte-okwike")},m(h,d){Y(h,e,d),f(e,t),f(e,o),f(e,i),Y(h,n,d),Y(h,c,d),f(c,l),f(l,u),f(c,p),f(c,m),f(m,w),A||(V=[J(l,"click",s[18]),J(m,"click",s[19])],A=!0)},p(h,d){d&4&&a!==(a=h[2].name+"")&&Ye(o,a)},d(h){h&&y(e),h&&y(n),h&&y(c),A=!1,Re(V)}}}function up(s){let e,t,a,o,i,n,c,l,u,p,m;const w=s[12].default,A=zr(w,s,s[21],null);let V=s[2]&&Sr(s);function h(T){s[20](T)}let d={$$slots:{default:[cp]},$$scope:{ctx:s}};return s[4]!==void 0&&(d.open=s[4]),c=new sr({props:d}),ue.push(()=>pe(c,"open",h)),{c(){e=D("div"),A&&A.c(),t=B(),V&&V.c(),n=B(),K(c.$$.fragment),this.h()},l(T){e=E(T,"DIV",{class:!0,draggable:!0});var _=q(e);A&&A.l(_),t=U(_),V&&V.l(_),_.forEach(y),n=U(T),Q(c.$$.fragment,T),this.h()},h(){v(e,"class","sidebar-entry svelte-okwike"),v(e,"draggable",a=!!s[2]),Ae(e,"over",s[3]),Ae(e,"active",s[2]&&s[5]===s[2]),Ae(e,"in-folder",!!ot(s[2]))},m(T,_){Y(T,e,_),A&&A.m(e,null),f(e,t),V&&V.m(e,null),Y(T,n,_),X(c,T,_),u=!0,p||(m=[J(e,"dragstart",s[7]),J(e,"drop",at(je(s[8]))),J(e,"dragover",je(s[9])),J(e,"dragleave",s[17]),J(e,"click",s[13])],p=!0)},p(T,[_]){s=T,A&&A.p&&(!u||_&2097152)&&Yr(A,w,s,s[21],u?Xr(w,s[21],_,null):Kr(s[21]),null),s[2]?V?V.p(s,_):(V=Sr(s),V.c(),V.m(e,null)):V&&(V.d(1),V=null),(!u||_&4&&a!==(a=!!s[2]))&&v(e,"draggable",a),(!u||_&8)&&Ae(e,"over",s[3]),(!u||_&36)&&Ae(e,"active",s[2]&&s[5]===s[2]),(!u||_&4)&&Ae(e,"in-folder",!!ot(s[2]));const k={};_&2097172&&(k.$$scope={dirty:_,ctx:s}),!l&&_&16&&(l=!0,k.open=s[4],he(()=>l=!1)),c.$set(k)},i(T){u||(R(A,T),qe(()=>{u&&(i&&i.end(1),o=So(e,s[10],{fn:Ue,x:s[1]==="left"?-100:100,duration:500,delay:s[6]?0:s[0]}),o.start())}),R(c.$$.fragment,T),u=!0)},o(T){C(A,T),o&&o.invalidate(),i=Do(e,Ue,{x:s[1]==="left"?-100:100,duration:500}),C(c.$$.fragment,T),u=!1},d(T){T&&y(e),A&&A.d(T),V&&V.d(),T&&i&&i.end(),T&&y(n),Z(c,T),p=!1,Re(m)}}}function pp(s,e,t){let a,o;de(s,er,F=>t(5,a=F)),de(s,dt,F=>t(6,o=F));let{$$slots:i={},$$scope:n}=e,{delay:c=0}=e,{direction:l="left"}=e,{data:u=void 0}=e,p=!1,m=!1;const w=F=>{if(!u){F.preventDefault();return}Ze.set(u)},A=()=>{const F=Se(Ze);let H;u&&(H=ot(u));const z=ot(F);if(z&&z.remove(F),H){H.add(F),t(3,p=!1),oc();return}F instanceof st&&(Se(ct)?nc(F):ic(F),F.parent=void 0),t(3,p=!1)},V=()=>{const F=Se(Ze);u!==F&&t(3,p=!0)},h=(F,H)=>(Se(Co)||(H.delay=0),H.fn(F,H)),d=F=>{F instanceof Be?qc(F):Oc(F)};function T(F){Zr.call(this,s,F)}const _=()=>lc(u),k=()=>d(u),j=()=>{var F;if((F=window.event)!=null&&F.shiftKey){yr(u);return}t(4,m=!0)},$=()=>t(3,p=!1),L=()=>t(4,m=!1),S=()=>yr(u);function G(F){m=F,t(4,m)}return s.$$set=F=>{"delay"in F&&t(0,c=F.delay),"direction"in F&&t(1,l=F.direction),"data"in F&&t(2,u=F.data),"$$scope"in F&&t(21,n=F.$$scope)},[c,l,u,p,m,a,o,w,A,V,h,d,i,T,_,k,j,$,L,S,G,n]}class rt extends fe{constructor(e){super(),ge(this,e,pp,up,we,{delay:0,direction:1,data:2})}}const Er=(s,{delay:e=0,duration:t=500})=>{const o=getComputedStyle(s).width.match(/([\d.]+)(.*)/);if(!o)return{delay:e,duration:t,css:n=>`max-width: unset; width: ${n*100}%;`};const i=Number.parseFloat(o[1]);return{delay:e,duration:t,css:n=>`max-width: unset; width: ${n*i}${o[2]}; min-width: unset;`}};function $r(s,e,t){const a=s.slice();return a[16]=e[t],a[18]=t,a}function Pr(s){let e,t=[],a=new Map,o,i,n=s[0].data;const c=l=>l[16].key;for(let l=0;l<n.length;l+=1){let u=$r(s,n,l),p=c(u);a.set(p,t[l]=Vr(p,u))}return{c(){e=D("div");for(let l=0;l<t.length;l+=1)t[l].c();this.h()},l(l){e=E(l,"DIV",{class:!0});var u=q(e);for(let p=0;p<t.length;p+=1)t[p].l(u);u.forEach(y),this.h()},h(){v(e,"class","folder-content svelte-gwiyfq")},m(l,u){Y(l,e,u);for(let p=0;p<t.length;p+=1)t[p]&&t[p].m(e,null);i=!0},p(l,u){u&1&&(n=l[0].data,Ee(),t=Jl(t,u,c,1,l,n,a,e,Ql,Vr,null,$r),$e())},i(l){if(!i){for(let u=0;u<n.length;u+=1)R(t[u]);qe(()=>{i&&(o||(o=Je(e,ft,{},!0)),o.run(1))}),i=!0}},o(l){for(let u=0;u<t.length;u+=1)C(t[u]);o||(o=Je(e,ft,{},!1)),o.run(0),i=!1},d(l){l&&y(e);for(let u=0;u<t.length;u+=1)t[u].d();l&&o&&o.end()}}}function hp(s){let e,t;function a(){return s[15](s[16])}return e=new rt({props:{data:s[16],$$slots:{default:[dp]},$$scope:{ctx:s}}}),e.$on("click",a),{c(){K(e.$$.fragment)},l(o){Q(e.$$.fragment,o)},m(o,i){X(e,o,i),t=!0},p(o,i){s=o;const n={};i&1&&(n.data=s[16]),i&524289&&(n.$$scope={dirty:i,ctx:s}),e.$set(n)},i(o){t||(R(e.$$.fragment,o),t=!0)},o(o){C(e.$$.fragment,o),t=!1},d(o){Z(e,o)}}}function mp(s){let e,t;return e=new ir({props:{folder:s[16]}}),{c(){K(e.$$.fragment)},l(a){Q(e.$$.fragment,a)},m(a,o){X(e,a,o),t=!0},p(a,o){const i={};o&1&&(i.folder=a[16]),e.$set(i)},i(a){t||(R(e.$$.fragment,a),t=!0)},o(a){C(e.$$.fragment,a),t=!1},d(a){Z(e,a)}}}function dp(s){let e=s[16].name+"",t,a;return{c(){t=M(e),a=B()},l(o){t=ee(o,e),a=U(o)},m(o,i){Y(o,t,i),Y(o,a,i)},p(o,i){i&1&&e!==(e=o[16].name+"")&&Ye(t,e)},d(o){o&&y(t),o&&y(a)}}}function Vr(s,e){let t,a,o,i,n;const c=[mp,hp],l=[];function u(p,m){return p[16].isFolder?0:1}return a=u(e),o=l[a]=c[a](e),{key:s,first:null,c(){t=De(),o.c(),i=De(),this.h()},l(p){t=De(),o.l(p),i=De(),this.h()},h(){this.first=t},m(p,m){Y(p,t,m),l[a].m(p,m),Y(p,i,m),n=!0},p(p,m){e=p;let w=a;a=u(e),a===w?l[a].p(e,m):(Ee(),C(l[w],1,1,()=>{l[w]=null}),$e(),o=l[a],o?o.p(e,m):(o=l[a]=c[a](e),o.c()),R(o,1),o.m(i.parentNode,i))},i(p){n||(R(o),n=!0)},o(p){C(o),n=!1},d(p){p&&y(t),l[a].d(p),p&&y(i)}}}function fp(s){let e,t,a,o,i,n,c,l,u,p,m,w,A,V,h,d,T,_,k,j,$,L,S,G,F,H=s[0].open&&Pr(s);return{c(){e=D("div"),t=D("span"),a=M("folder"),o=B(),i=D("span"),n=B(),c=D("div"),l=D("div"),u=D("span"),p=M("add"),m=B(),w=D("div"),A=D("span"),V=M("edit"),h=B(),d=D("div"),T=D("span"),_=M("delete"),$=B(),H&&H.c(),L=De(),this.h()},l(z){e=E(z,"DIV",{class:!0,draggable:!0});var le=q(e);t=E(le,"SPAN",{class:!0});var ve=q(t);a=ee(ve,"folder"),ve.forEach(y),o=U(le),i=E(le,"SPAN",{class:!0,contenteditable:!0}),q(i).forEach(y),n=U(le),c=E(le,"DIV",{class:!0});var ie=q(c);l=E(ie,"DIV",{class:!0,title:!0});var be=q(l);u=E(be,"SPAN",{class:!0});var W=q(u);p=ee(W,"add"),W.forEach(y),be.forEach(y),m=U(ie),w=E(ie,"DIV",{class:!0,title:!0});var se=q(w);A=E(se,"SPAN",{class:!0});var me=q(A);V=ee(me,"edit"),me.forEach(y),se.forEach(y),h=U(ie),d=E(ie,"DIV",{class:!0,title:!0});var He=q(d);T=E(He,"SPAN",{class:!0});var ce=q(T);_=ee(ce,"delete"),ce.forEach(y),He.forEach(y),ie.forEach(y),le.forEach(y),$=U(z),H&&H.l(z),L=De(),this.h()},h(){v(t,"class","material-symbols-rounded folder-icon svelte-gwiyfq"),v(i,"class","name svelte-gwiyfq"),v(i,"contenteditable","false"),s[0].name===void 0&&qe(()=>s[12].call(i)),v(u,"class","material-symbols-rounded"),v(l,"class","icon add svelte-gwiyfq"),v(l,"title","Add Folder"),v(A,"class","material-symbols-rounded"),v(w,"class","icon svelte-gwiyfq"),v(w,"title","Rename"),v(T,"class","material-symbols-rounded"),v(d,"class","icon delete svelte-gwiyfq"),v(d,"title","Delete Folder"),v(c,"class","buttons svelte-gwiyfq"),v(e,"class","folder svelte-gwiyfq"),v(e,"draggable","true"),Ae(e,"over",s[2])},m(z,le){Y(z,e,le),f(e,t),f(t,a),f(e,o),f(e,i),s[11](i),s[0].name!==void 0&&(i.textContent=s[0].name),f(e,n),f(e,c),f(c,l),f(l,u),f(u,p),f(c,m),f(c,w),f(w,A),f(A,V),f(c,h),f(c,d),f(d,T),f(T,_),Y(z,$,le),H&&H.m(z,le),Y(z,L,le),S=!0,G||(F=[J(i,"blur",function(){hc(s[1].contentEditable="false")&&(s[1].contentEditable="false").apply(this,arguments)}),J(i,"input",s[12]),J(i,"keydown",s[5]),J(l,"click",s[7]),J(w,"click",s[4]),J(d,"click",s[6]),J(e,"dragstart",s[8]),J(e,"drop",at(je(s[9]))),J(e,"dragover",je(s[10])),J(e,"dragleave",s[13]),J(e,"click",s[14])],G=!0)},p(z,[le]){s=z,le&1&&s[0].name!==i.textContent&&(i.textContent=s[0].name),(!S||le&4)&&Ae(e,"over",s[2]),s[0].open?H?(H.p(s,le),le&1&&R(H,1)):(H=Pr(s),H.c(),R(H,1),H.m(L.parentNode,L)):H&&(Ee(),C(H,1,1,()=>{H=null}),$e())},i(z){S||(qe(()=>{S&&(j&&j.end(1),k=So(e,ft,{duration:s[3]?0:400}),k.start())}),R(H),S=!0)},o(z){k&&k.invalidate(),j=Do(e,ft,{}),C(H),S=!1},d(z){z&&y(e),s[11](null),z&&j&&j.end(),z&&y($),H&&H.d(z),z&&y(L),G=!1,Re(F)}}}function gp(s,e,t){let a;de(s,dt,k=>t(3,a=k));let{folder:o}=e,i,n=k=>{k&&k.stopPropagation(),t(1,i.contentEditable="true",i),i.focus(),setTimeout(()=>{const j=document.createRange();j.setStart(i,0),j.setEnd(i,1);const $=window.getSelection();$.removeAllRanges(),$.addRange(j)},1)};const c=k=>{k.key=="Enter"&&(k.preventDefault(),k.stopPropagation(),i.blur())},l=k=>{k.stopPropagation(),Lc(o)},u=k=>{k.stopPropagation(),o.createFolder(),t(0,o.open=!0,o),oc()};let p=!1;const m=()=>{Ze.set(o)},w=()=>{t(2,p=!1);const k=Se(Ze);if(!k||o.data.includes(k))return;const j=ot(k);j&&j.remove(k),k instanceof st&&(Fc(k),k.parent=o),o.add(k)},A=()=>{o!==Se(Ze)&&t(2,p=!0)};function V(k){ue[k?"unshift":"push"](()=>{i=k,t(1,i)})}function h(){o.name=this.textContent,t(0,o)}const d=()=>t(2,p=!1),T=()=>t(0,o.open=!o.open,o),_=k=>ht(`${xe}/${k.isClass?"class":"skill"}/${k.name}${k.isClass?"/edit":""}`);return s.$$set=k=>{"folder"in k&&t(0,o=k.folder)},[o,i,p,a,n,c,l,u,m,w,A,V,h,d,T,_]}class ir extends fe{constructor(e){super(),ge(this,e,gp,fp,we,{folder:0})}}function qr(s,e,t){const a=s.slice();return a[35]=e[t],a[31]=t,a}function Or(s,e,t){const a=s.slice();return a[35]=e[t],a}function Lr(s,e,t){const a=s.slice();return a[29]=e[t],a[31]=t,a}function Fr(s,e,t){const a=s.slice();return a[32]=e[t],a}function wp(s){let e,t,a=[],o=new Map,i,n,c,l,u,p=s[8],m=[];for(let h=0;h<p.length;h+=1)m[h]=Rr(Or(s,p,h));const w=h=>C(m[h],1,1,()=>{m[h]=null});let A=s[9].filter(s[18]);const V=h=>h[35].key;for(let h=0;h<A.length;h+=1){let d=qr(s,A,h),T=V(d);o.set(T,a[h]=Nr(T,d))}return n=new rt({props:{delay:200+100*(s[9].length+1),direction:"right",$$slots:{default:[vp]},$$scope:{ctx:s}}}),{c(){e=D("div");for(let h=0;h<m.length;h+=1)m[h].c();t=B();for(let h=0;h<a.length;h+=1)a[h].c();i=B(),K(n.$$.fragment),this.h()},l(h){e=E(h,"DIV",{class:!0});var d=q(e);for(let T=0;T<m.length;T+=1)m[T].l(d);t=U(d);for(let T=0;T<a.length;T+=1)a[T].l(d);i=U(d),Q(n.$$.fragment,d),d.forEach(y),this.h()},h(){v(e,"class","items svelte-1h2o852")},m(h,d){Y(h,e,d);for(let T=0;T<m.length;T+=1)m[T]&&m[T].m(e,null);f(e,t);for(let T=0;T<a.length;T+=1)a[T]&&a[T].m(e,null);f(e,i),X(n,e,null),u=!0},p(h,d){if(d[0]&256){p=h[8];let _;for(_=0;_<p.length;_+=1){const k=Or(h,p,_);m[_]?(m[_].p(k,d),R(m[_],1)):(m[_]=Rr(k),m[_].c(),R(m[_],1),m[_].m(e,t))}for(Ee(),_=p.length;_<m.length;_+=1)w(_);$e()}d[0]&514&&(A=h[9].filter(h[18]),Ee(),a=Jl(a,d,V,1,h,A,o,e,Ql,Nr,i,qr),$e());const T={};d[0]&512&&(T.delay=200+100*(h[9].length+1)),d[1]&256&&(T.$$scope={dirty:d,ctx:h}),n.$set(T)},i(h){if(!u){for(let d=0;d<p.length;d+=1)R(m[d]);for(let d=0;d<A.length;d+=1)R(a[d]);R(n.$$.fragment,h),qe(()=>{u&&(l&&l.end(1),c=So(e,Ue,{x:100}),c.start())}),u=!0}},o(h){m=m.filter(Boolean);for(let d=0;d<m.length;d+=1)C(m[d]);for(let d=0;d<a.length;d+=1)C(a[d]);C(n.$$.fragment,h),c&&c.invalidate(),l=Do(e,Ue,{x:100}),u=!1},d(h){h&&y(e),Ml(m,h);for(let d=0;d<a.length;d+=1)a[d].d();Z(n),h&&l&&l.end()}}}function yp(s){let e,t,a=[],o=new Map,i,n,c,l,u,p=s[6],m=[];for(let h=0;h<p.length;h+=1)m[h]=xr(Fr(s,p,h));const w=h=>C(m[h],1,1,()=>{m[h]=null});let A=s[7].filter(s[14]);const V=h=>h[29].key;for(let h=0;h<A.length;h+=1){let d=Lr(s,A,h),T=V(d);o.set(T,a[h]=Cr(T,d))}return n=new rt({props:{delay:200+100*(s[7].length+1),$$slots:{default:[kp]},$$scope:{ctx:s}}}),{c(){e=D("div");for(let h=0;h<m.length;h+=1)m[h].c();t=B();for(let h=0;h<a.length;h+=1)a[h].c();i=B(),K(n.$$.fragment),this.h()},l(h){e=E(h,"DIV",{class:!0});var d=q(e);for(let T=0;T<m.length;T+=1)m[T].l(d);t=U(d);for(let T=0;T<a.length;T+=1)a[T].l(d);i=U(d),Q(n.$$.fragment,d),d.forEach(y),this.h()},h(){v(e,"class","items svelte-1h2o852")},m(h,d){Y(h,e,d);for(let T=0;T<m.length;T+=1)m[T]&&m[T].m(e,null);f(e,t);for(let T=0;T<a.length;T+=1)a[T]&&a[T].m(e,null);f(e,i),X(n,e,null),u=!0},p(h,d){if(d[0]&64){p=h[6];let _;for(_=0;_<p.length;_+=1){const k=Fr(h,p,_);m[_]?(m[_].p(k,d),R(m[_],1)):(m[_]=xr(k),m[_].c(),R(m[_],1),m[_].m(e,t))}for(Ee(),_=p.length;_<m.length;_+=1)w(_);$e()}d[0]&129&&(A=h[7].filter(h[14]),Ee(),a=Jl(a,d,V,1,h,A,o,e,Ql,Cr,i,Lr),$e());const T={};d[0]&128&&(T.delay=200+100*(h[7].length+1)),d[1]&256&&(T.$$scope={dirty:d,ctx:h}),n.$set(T)},i(h){if(!u){for(let d=0;d<p.length;d+=1)R(m[d]);for(let d=0;d<A.length;d+=1)R(a[d]);R(n.$$.fragment,h),qe(()=>{u&&(l&&l.end(1),c=So(e,Ue,{x:-100}),c.start())}),u=!0}},o(h){m=m.filter(Boolean);for(let d=0;d<m.length;d+=1)C(m[d]);for(let d=0;d<a.length;d+=1)C(a[d]);C(n.$$.fragment,h),c&&c.invalidate(),l=Do(e,Ue,{x:-100}),u=!1},d(h){h&&y(e),Ml(m,h);for(let d=0;d<a.length;d+=1)a[d].d();Z(n),h&&l&&l.end()}}}function Rr(s){let e,t;return e=new ir({props:{folder:s[35]}}),{c(){K(e.$$.fragment)},l(a){Q(e.$$.fragment,a)},m(a,o){X(e,a,o),t=!0},p(a,o){const i={};o[0]&256&&(i.folder=a[35]),e.$set(i)},i(a){t||(R(e.$$.fragment,a),t=!0)},o(a){C(e.$$.fragment,a),t=!1},d(a){Z(e,a)}}}function Tp(s){let e=s[35].name+"",t;return{c(){t=M(e)},l(a){t=ee(a,e)},m(a,o){Y(a,t,o)},p(a,o){o[0]&514&&e!==(e=a[35].name+"")&&Ye(t,e)},d(a){a&&y(t)}}}function Nr(s,e){let t,a,o;function i(){return e[19](e[35])}return a=new rt({props:{data:e[35],direction:"right",delay:200+100*e[31],$$slots:{default:[Tp]},$$scope:{ctx:e}}}),a.$on("click",i),{key:s,first:null,c(){t=De(),K(a.$$.fragment),this.h()},l(n){t=De(),Q(a.$$.fragment,n),this.h()},h(){this.first=t},m(n,c){Y(n,t,c),X(a,n,c),o=!0},p(n,c){e=n;const l={};c[0]&514&&(l.data=e[35]),c[0]&514&&(l.delay=200+100*e[31]),c[0]&514|c[1]&256&&(l.$$scope={dirty:c,ctx:e}),a.$set(l)},i(n){o||(R(a.$$.fragment,n),o=!0)},o(n){C(a.$$.fragment,n),o=!1},d(n){n&&y(t),Z(a,n)}}}function vp(s){let e,t,a,o,i,n,c,l;return{c(){e=D("div"),t=D("span"),a=M("New Skill"),o=B(),i=D("span"),n=M("New Folder"),this.h()},l(u){e=E(u,"DIV",{class:!0});var p=q(e);t=E(p,"SPAN",{class:!0});var m=q(t);a=ee(m,"New Skill"),m.forEach(y),o=U(p),i=E(p,"SPAN",{class:!0});var w=q(i);n=ee(w,"New Folder"),w.forEach(y),p.forEach(y),this.h()},h(){v(t,"class","svelte-1h2o852"),v(i,"class","new-folder svelte-1h2o852"),v(e,"class","new svelte-1h2o852")},m(u,p){Y(u,e,p),f(e,t),f(t,a),f(e,o),f(e,i),f(i,n),c||(l=[J(t,"click",s[20]),J(i,"click",s[21])],c=!0)},p:Pe,d(u){u&&y(e),c=!1,Re(l)}}}function xr(s){let e,t;return e=new ir({props:{folder:s[32]}}),{c(){K(e.$$.fragment)},l(a){Q(e.$$.fragment,a)},m(a,o){X(e,a,o),t=!0},p(a,o){const i={};o[0]&64&&(i.folder=a[32]),e.$set(i)},i(a){t||(R(e.$$.fragment,a),t=!0)},o(a){C(e.$$.fragment,a),t=!1},d(a){Z(e,a)}}}function bp(s){let e=s[29].name+"",t;return{c(){t=M(e)},l(a){t=ee(a,e)},m(a,o){Y(a,t,o)},p(a,o){o[0]&129&&e!==(e=a[29].name+"")&&Ye(t,e)},d(a){a&&y(t)}}}function Cr(s,e){let t,a,o;function i(){return e[15](e[29])}return a=new rt({props:{data:e[29],delay:200+100*e[31],$$slots:{default:[bp]},$$scope:{ctx:e}}}),a.$on("click",i),{key:s,first:null,c(){t=De(),K(a.$$.fragment),this.h()},l(n){t=De(),Q(a.$$.fragment,n),this.h()},h(){this.first=t},m(n,c){Y(n,t,c),X(a,n,c),o=!0},p(n,c){e=n;const l={};c[0]&129&&(l.data=e[29]),c[0]&129&&(l.delay=200+100*e[31]),c[0]&129|c[1]&256&&(l.$$scope={dirty:c,ctx:e}),a.$set(l)},i(n){o||(R(a.$$.fragment,n),o=!0)},o(n){C(a.$$.fragment,n),o=!1},d(n){n&&y(t),Z(a,n)}}}function kp(s){let e,t,a,o,i,n,c,l;return{c(){e=D("div"),t=D("span"),a=M("New Class"),o=B(),i=D("span"),n=M("New Folder"),this.h()},l(u){e=E(u,"DIV",{class:!0});var p=q(e);t=E(p,"SPAN",{class:!0});var m=q(t);a=ee(m,"New Class"),m.forEach(y),o=U(p),i=E(p,"SPAN",{class:!0});var w=q(i);n=ee(w,"New Folder"),w.forEach(y),p.forEach(y),this.h()},h(){v(t,"class","svelte-1h2o852"),v(i,"class","new-folder svelte-1h2o852"),v(e,"class","new svelte-1h2o852")},m(u,p){Y(u,e,p),f(e,t),f(t,a),f(e,o),f(e,i),f(i,n),c||(l=[J(t,"click",s[16]),J(i,"click",s[17])],c=!0)},p:Pe,d(u){u&&y(e),c=!1,Re(l)}}}function _p(s){let e=!1,t=()=>{e=!1},a,o,i,n,c,l,u,p,m,w,A,V=`calc(${s[3]}px - 6rem + min(3rem, ${s[4]}px))`,h,d,T;qe(s[11]),qe(s[12]);function _(S){s[13](S)}let k={left:"Classes",right:"Skills",color:"#111",inline:!1};s[5]!==void 0&&(k.data=s[5]),n=new it({props:k}),ue.push(()=>pe(n,"data",_));const j=[yp,wp],$=[];function L(S,G){return S[5]?0:1}return m=L(s),w=$[m]=j[m](s),{c(){o=D("div"),i=D("div"),K(n.$$.fragment),l=B(),u=D("hr"),p=B(),w.c(),this.h()},l(S){o=E(S,"DIV",{id:!0,class:!0});var G=q(o);i=E(G,"DIV",{class:!0});var F=q(i);Q(n.$$.fragment,F),l=U(F),u=E(F,"HR",{class:!0}),F.forEach(y),p=U(G),w.l(G),G.forEach(y),this.h()},h(){v(u,"class","svelte-1h2o852"),v(i,"class","type-wrap svelte-1h2o852"),v(o,"id","sidebar"),v(o,"class","svelte-1h2o852"),hr(o,"--height",V)},m(S,G){Y(S,o,G),f(o,i),X(n,i,null),f(i,l),f(i,u),f(o,p),$[m].m(o,null),h=!0,d||(T=[J(window,"resize",s[11]),J(window,"scroll",()=>{e=!0,clearTimeout(a),a=setTimeout(t,100),s[12]()}),J(o,"introend",s[22]),J(o,"outroend",s[23]),mc(Xc.call(null,o)),J(o,"outclick",s[10])],d=!0)},p(S,G){G[0]&16&&!e&&(e=!0,clearTimeout(a),scrollTo(window.pageXOffset,S[4]),a=setTimeout(t,100));const F={};!c&&G[0]&32&&(c=!0,F.data=S[5],he(()=>c=!1)),n.$set(F);let H=m;m=L(S),m===H?$[m].p(S,G):(Ee(),C($[H],1,1,()=>{$[H]=null}),$e(),w=$[m],w?w.p(S,G):(w=$[m]=j[m](S),w.c()),R(w,1),w.m(o,null)),G[0]&24&&V!==(V=`calc(${S[3]}px - 6rem + min(3rem, ${S[4]}px))`)&&hr(o,"--height",V)},i(S){h||(R(n.$$.fragment,S),R(w),qe(()=>{h&&(A||(A=Je(o,Er,{},!0)),A.run(1))}),h=!0)},o(S){C(n.$$.fragment,S),C(w),A||(A=Je(o,Er,{},!1)),A.run(0),h=!1},d(S){S&&y(o),Z(n),$[m].d(),S&&A&&A.end(),d=!1,Re(T)}}}function Ip(s,e,t){let a,o,i,n,c;de(s,ct,W=>t(5,a=W)),de(s,ut,W=>t(6,o=W)),de(s,mt,W=>t(7,i=W)),de(s,pt,W=>t(8,n=W)),de(s,Qe,W=>t(9,c=W));let l=[],u,p,m=[],w=[],A,V,h;const d=(W,se)=>{W instanceof Array&&W.forEach(me=>d(me,se)),W instanceof st?d(W.data,se):(W instanceof Be||W instanceof Ne)&&se.push(W)},T=W=>{Se(ct)?(l=W||Se(ut),t(0,m=[]),d(l,m)):(l=W||Se(pt),t(1,w=[]),d(l,w))};Jr(()=>{u=ut.subscribe(T),p=pt.subscribe(T)}),dc(T),Qr(()=>{u&&u(),p&&p()});const _=W=>{A<500&&(W.detail.stopPropagation(),xc())};function k(){t(2,A=window.innerWidth),t(3,V=window.innerHeight)}function j(){t(4,h=window.pageYOffset)}function $(W){a=W,ct.set(a)}return[m,w,A,V,h,a,o,i,n,c,_,k,j,$,W=>!m.includes(W),W=>ht(`${xe}/class/${W.name}/edit`),()=>Rc(),()=>nc(new st),W=>!w.includes(W),W=>ht(`${xe}/skill/${W.name}`),()=>Nc(),()=>ic(new st),()=>dt.set(!0),()=>dt.set(!1)]}class Ap extends fe{constructor(e){super(),ge(this,e,Ip,_p,we,{},null,[-1,-1])}}function Hr(s,e,t){const a=s.slice();return a[12]=e[t],a}function Wr(s){let e,t,a=s[12]+"",o;return{c(){e=D("option"),t=M("1."),o=M(a),this.h()},l(i){e=E(i,"OPTION",{});var n=q(e);t=ee(n,"1."),o=ee(n,a),n.forEach(y),this.h()},h(){e.__value=s[12],e.value=e.__value},m(i,n){Y(i,e,n),f(e,t),f(e,o)},p:Pe,d(i){i&&y(e)}}}function Sp(s){let e,t,a,o=Object.keys(vr).reverse(),i=[];for(let n=0;n<o.length;n+=1)i[n]=Wr(Hr(s,o,n));return{c(){e=D("select");for(let n=0;n<i.length;n+=1)i[n].c();this.h()},l(n){e=E(n,"SELECT",{});var c=q(e);for(let l=0;l<i.length;l+=1)i[l].l(c);c.forEach(y),this.h()},h(){s[1]===void 0&&qe(()=>s[6].call(e))},m(n,c){Y(n,e,c);for(let l=0;l<i.length;l+=1)i[l]&&i[l].m(e,null);mr(e,s[1],!0),t||(a=J(e,"change",s[6]),t=!0)},p(n,c){if(c&0){o=Object.keys(vr).reverse();let l;for(l=0;l<o.length;l+=1){const u=Hr(n,o,l);i[l]?i[l].p(u,c):(i[l]=Wr(u),i[l].c(),i[l].m(e,null))}for(;l<i.length;l+=1)i[l].d(1);i.length=o.length}c&2&&mr(e,n[1])},d(n){n&&y(e),Ml(i,n),t=!1,a()}}}function Dp(s){let e,t,a;function o(n){s[7](n)}let i={left:"Symbols",right:"Text"};return s[2]!==void 0&&(i.data=s[2]),e=new it({props:i}),ue.push(()=>pe(e,"data",o)),{c(){K(e.$$.fragment)},l(n){Q(e.$$.fragment,n)},m(n,c){X(e,n,c),a=!0},p(n,c){const l={};!t&&c&4&&(t=!0,l.data=n[2],he(()=>t=!1)),e.$set(l)},i(n){a||(R(e.$$.fragment,n),a=!0)},o(n){C(e.$$.fragment,n),a=!1},d(n){Z(e,n)}}}function Ep(s){let e,t,a;function o(n){s[8](n)}let i={left:"True",right:"False"};return s[3]!==void 0&&(i.data=s[3]),e=new it({props:i}),ue.push(()=>pe(e,"data",o)),{c(){K(e.$$.fragment)},l(n){Q(e.$$.fragment,n)},m(n,c){X(e,n,c),a=!0},p(n,c){const l={};!t&&c&8&&(t=!0,l.data=n[3],he(()=>t=!1)),e.$set(l)},i(n){a||(R(e.$$.fragment,n),a=!0)},o(n){C(e.$$.fragment,n),a=!1},d(n){Z(e,n)}}}function $p(s){let e,t,a;function o(n){s[9](n)}let i={};return s[4]!==void 0&&(i.data=s[4]),e=new it({props:i}),ue.push(()=>pe(e,"data",o)),{c(){K(e.$$.fragment)},l(n){Q(e.$$.fragment,n)},m(n,c){X(e,n,c),a=!0},p(n,c){const l={};!t&&c&16&&(t=!0,l.data=n[4],he(()=>t=!1)),e.$set(l)},i(n){a||(R(e.$$.fragment,n),a=!0)},o(n){C(e.$$.fragment,n),a=!1},d(n){Z(e,n)}}}function Pp(s){let e,t,a,o,i,n,c,l,u,p,m,w,A,V,h,d,T,_,k,j,$;return c=new Te({props:{label:"Server",tooltip:"This should match your target Spigot server version",$$slots:{default:[Sp]},$$scope:{ctx:s}}}),u=new Te({props:{label:"Use Symbols",tooltip:"If skill components should use symbols instead of text",$$slots:{default:[Dp]},$$scope:{ctx:s}}}),m=new Te({props:{label:"Show Summary Items",tooltip:"If skill components should show a simplified summary on the element",$$slots:{default:[Ep]},$$scope:{ctx:s}}}),A=new Te({props:{label:"Waterfall Animation",tooltip:"If the waterfall animation should play in the sidebar",$$slots:{default:[$p]},$$scope:{ctx:s}}}),{c(){e=D("h1"),t=M("Settings"),a=B(),o=D("hr"),i=B(),n=D("div"),K(c.$$.fragment),l=B(),K(u.$$.fragment),p=B(),K(m.$$.fragment),w=B(),K(A.$$.fragment),V=B(),h=D("hr"),d=B(),T=D("button"),_=M("Clear Data"),this.h()},l(L){e=E(L,"H1",{});var S=q(e);t=ee(S,"Settings"),S.forEach(y),a=U(L),o=E(L,"HR",{}),i=U(L),n=E(L,"DIV",{class:!0});var G=q(n);Q(c.$$.fragment,G),l=U(G),Q(u.$$.fragment,G),p=U(G),Q(m.$$.fragment,G),w=U(G),Q(A.$$.fragment,G),V=U(G),h=E(G,"HR",{class:!0}),d=U(G),T=E(G,"BUTTON",{class:!0});var F=q(T);_=ee(F,"Clear Data"),F.forEach(y),G.forEach(y),this.h()},h(){v(h,"class","span svelte-1wp1eds"),v(T,"class","button btn-danger span svelte-1wp1eds"),v(n,"class","settings-container svelte-1wp1eds")},m(L,S){Y(L,e,S),f(e,t),Y(L,a,S),Y(L,o,S),Y(L,i,S),Y(L,n,S),X(c,n,null),f(n,l),X(u,n,null),f(n,p),X(m,n,null),f(n,w),X(A,n,null),f(n,V),f(n,h),f(n,d),f(n,T),f(T,_),k=!0,j||($=J(T,"click",s[5]),j=!0)},p(L,S){const G={};S&32770&&(G.$$scope={dirty:S,ctx:L}),c.$set(G);const F={};S&32772&&(F.$$scope={dirty:S,ctx:L}),u.$set(F);const H={};S&32776&&(H.$$scope={dirty:S,ctx:L}),m.$set(H);const z={};S&32784&&(z.$$scope={dirty:S,ctx:L}),A.$set(z)},i(L){k||(R(c.$$.fragment,L),R(u.$$.fragment,L),R(m.$$.fragment,L),R(A.$$.fragment,L),k=!0)},o(L){C(c.$$.fragment,L),C(u.$$.fragment,L),C(m.$$.fragment,L),C(A.$$.fragment,L),k=!1},d(L){L&&y(e),L&&y(a),L&&y(o),L&&y(i),L&&y(n),Z(c),Z(u),Z(m),Z(A),j=!1,$()}}}function Vp(s){let e,t,a;function o(n){s[10](n)}let i={width:"50rem",$$slots:{default:[Pp]},$$scope:{ctx:s}};return s[0]!==void 0&&(i.open=s[0]),e=new sr({props:i}),ue.push(()=>pe(e,"open",o)),e.$on("close",s[11]),{c(){K(e.$$.fragment)},l(n){Q(e.$$.fragment,n)},m(n,c){X(e,n,c),a=!0},p(n,[c]){const l={};c&32798&&(l.$$scope={dirty:c,ctx:n}),!t&&c&1&&(t=!0,l.open=n[0],he(()=>t=!1)),e.$set(l)},i(n){a||(R(e.$$.fragment,n),a=!0)},o(n){C(e.$$.fragment,n),a=!1},d(n){Z(e,n)}}}function qp(s,e,t){let a,o,i,n;de(s,Tr,h=>t(1,a=h)),de(s,kr,h=>t(2,o=h)),de(s,_r,h=>t(3,i=h)),de(s,Co,h=>t(4,n=h));let c=!0;const l=()=>{confirm("Are you sure you want to clear all data?")&&(mt.set([]),ut.set([]),Qe.set([]),pt.set([]))};function u(){a=fc(this),Tr.set(a)}function p(h){o=h,kr.set(o)}function m(h){i=h,_r.set(i)}function w(h){n=h,Co.set(n)}function A(h){c=h,t(0,c)}function V(h){Zr.call(this,s,h)}return[c,a,o,i,n,l,u,p,m,w,A,V]}class Op extends fe{constructor(e){super(),ge(this,e,qp,Vp,we,{})}}function Br(s){let e,t;return e=new Ap({}),{c(){K(e.$$.fragment)},l(a){Q(e.$$.fragment,a)},m(a,o){X(e,a,o),t=!0},i(a){t||(R(e.$$.fragment,a),t=!0)},o(a){C(e.$$.fragment,a),t=!1},d(a){Z(e,a)}}}function Ur(s){let e,t;return e=new hu({}),{c(){K(e.$$.fragment)},l(a){Q(e.$$.fragment,a)},m(a,o){X(e,a,o),t=!0},i(a){t||(R(e.$$.fragment,a),t=!0)},o(a){C(e.$$.fragment,a),t=!1},d(a){Z(e,a)}}}function Gr(s){let e,t=s[7]?"Saving...":"Saved!",a,o,i;return{c(){e=D("div"),a=M(t),this.h()},l(n){e=E(n,"DIV",{class:!0});var c=q(e);a=ee(c,t),c.forEach(y),this.h()},h(){v(e,"class","saving svelte-1wddbe6")},m(n,c){Y(n,e,c),f(e,a),i=!0},p(n,c){(!i||c&128)&&t!==(t=n[7]?"Saving...":"Saved!")&&Ye(a,t)},i(n){i||(qe(()=>{i&&(o||(o=Je(e,Ue,{y:-20},!0)),o.run(1))}),i=!0)},o(n){o||(o=Je(e,Ue,{y:-20},!1)),o.run(0),i=!1},d(n){n&&y(e),n&&o&&o.end()}}}function jr(s){let e,t,a,o;return{c(){e=D("div"),t=M("Drop to Import"),this.h()},l(i){e=E(i,"DIV",{class:!0});var n=q(e);t=ee(n,"Drop to Import"),n.forEach(y),this.h()},h(){v(e,"class","dragging svelte-1wddbe6")},m(i,n){Y(i,e,n),f(e,t),a||(o=J(e,"dragleave",s[8]),a=!0)},p:Pe,d(i){i&&y(e),a=!1,o()}}}function Lp(s){let e,t,a,o,i,n,c,l,u,p,m,w,A,V,h,d,T,_,k,j,$,L,S,G,F,H,z,le,ve;e=new vu({}),a=new fu({});let ie=s[3]&&Br();const be=s[11].default,W=zr(be,s,s[10],null);let se=s[4]&&Ur();var me=s[5];function He(P){return{props:{data:P[6]}}}me&&(S=dr(me,He(s)),S.$on("close",Ir),S.$on("save",s[9]));let ce=s[1]&&Gr(s),ye=s[0]&&jr(s);return{c(){K(e.$$.fragment),t=B(),K(a.$$.fragment),o=B(),i=D("div"),ie&&ie.c(),n=B(),c=D("div"),W&&W.c(),l=B(),u=D("div"),p=D("div"),m=D("span"),w=M("cloud_download"),A=B(),V=D("div"),h=D("span"),d=M("settings"),T=B(),_=D("div"),k=D("span"),j=M("save"),$=B(),se&&se.c(),L=B(),S&&K(S.$$.fragment),G=B(),ce&&ce.c(),F=B(),ye&&ye.c(),H=De(),this.h()},l(P){Q(e.$$.fragment,P),t=U(P),Q(a.$$.fragment,P),o=U(P),i=E(P,"DIV",{id:!0,class:!0});var oe=q(i);ie&&ie.l(oe),n=U(oe),c=E(oe,"DIV",{id:!0,class:!0});var We=q(c);W&&W.l(We),We.forEach(y),oe.forEach(y),l=U(P),u=E(P,"DIV",{id:!0,class:!0});var Ie=q(u);p=E(Ie,"DIV",{class:!0,title:!0});var et=q(p);m=E(et,"SPAN",{class:!0});var tt=q(m);w=ee(tt,"cloud_download"),tt.forEach(y),et.forEach(y),A=U(Ie),V=E(Ie,"DIV",{class:!0,title:!0});var lr=q(V);h=E(lr,"SPAN",{class:!0});var rr=q(h);d=ee(rr,"settings"),rr.forEach(y),lr.forEach(y),T=U(Ie),_=E(Ie,"DIV",{class:!0,title:!0});var cr=q(_);k=E(cr,"SPAN",{class:!0});var ur=q(k);j=ee(ur,"save"),ur.forEach(y),cr.forEach(y),Ie.forEach(y),$=U(P),se&&se.l(P),L=U(P),S&&Q(S.$$.fragment,P),G=U(P),ce&&ce.l(P),F=U(P),ye&&ye.l(P),H=De(),this.h()},h(){v(c,"id","body"),v(c,"class","svelte-1wddbe6"),Ae(c,"centered",!s[2]),v(i,"id","body-container"),v(i,"class","svelte-1wddbe6"),Ae(i,"empty",!s[2]),v(m,"class","material-symbols-rounded svelte-1wddbe6"),v(p,"class","button backup svelte-1wddbe6"),v(p,"title","Backup All Data"),v(h,"class","material-symbols-rounded svelte-1wddbe6"),v(V,"class","button settings svelte-1wddbe6"),v(V,"title","Change Settings"),v(k,"class","material-symbols-rounded svelte-1wddbe6"),v(_,"class","button save svelte-1wddbe6"),v(_,"title","Save"),v(u,"id","floating-buttons"),v(u,"class","svelte-1wddbe6")},m(P,oe){X(e,P,oe),Y(P,t,oe),X(a,P,oe),Y(P,o,oe),Y(P,i,oe),ie&&ie.m(i,null),f(i,n),f(i,c),W&&W.m(c,null),Y(P,l,oe),Y(P,u,oe),f(u,p),f(p,m),f(m,w),f(u,A),f(u,V),f(V,h),f(h,d),f(u,T),f(u,_),f(_,k),f(k,j),Y(P,$,oe),se&&se.m(P,oe),Y(P,L,oe),S&&X(S,P,oe),Y(P,G,oe),ce&&ce.m(P,oe),Y(P,F,oe),ye&&ye.m(P,oe),Y(P,H,oe),z=!0,le||(ve=[J(p,"click",Cc),J(V,"click",s[12]),J(_,"click",s[13])],le=!0)},p(P,[oe]){P[3]?ie?oe&8&&R(ie,1):(ie=Br(),ie.c(),R(ie,1),ie.m(i,n)):ie&&(Ee(),C(ie,1,1,()=>{ie=null}),$e()),W&&W.p&&(!z||oe&1024)&&Yr(W,be,P,P[10],z?Xr(be,P[10],oe,null):Kr(P[10]),null),(!z||oe&4)&&Ae(c,"centered",!P[2]),(!z||oe&4)&&Ae(i,"empty",!P[2]),P[4]?se?oe&16&&R(se,1):(se=Ur(),se.c(),R(se,1),se.m(L.parentNode,L)):se&&(Ee(),C(se,1,1,()=>{se=null}),$e());const We={};if(oe&64&&(We.data=P[6]),oe&32&&me!==(me=P[5])){if(S){Ee();const Ie=S;C(Ie.$$.fragment,1,0,()=>{Z(Ie,1)}),$e()}me?(S=dr(me,He(P)),S.$on("close",Ir),S.$on("save",P[9]),K(S.$$.fragment),R(S.$$.fragment,1),X(S,G.parentNode,G)):S=null}else me&&S.$set(We);P[1]?ce?(ce.p(P,oe),oe&2&&R(ce,1)):(ce=Gr(P),ce.c(),R(ce,1),ce.m(F.parentNode,F)):ce&&(Ee(),C(ce,1,1,()=>{ce=null}),$e()),P[0]?ye?ye.p(P,oe):(ye=jr(P),ye.c(),ye.m(H.parentNode,H)):ye&&(ye.d(1),ye=null)},i(P){z||(R(e.$$.fragment,P),R(a.$$.fragment,P),R(ie),R(W,P),R(se),S&&R(S.$$.fragment,P),R(ce),z=!0)},o(P){C(e.$$.fragment,P),C(a.$$.fragment,P),C(ie),C(W,P),C(se),S&&C(S.$$.fragment,P),C(ce),z=!1},d(P){Z(e,P),P&&y(t),Z(a,P),P&&y(o),P&&y(i),ie&&ie.d(),W&&W.d(P),P&&y(l),P&&y(u),P&&y($),se&&se.d(P),P&&y(L),S&&Z(S,P),P&&y(G),ce&&ce.d(P),P&&y(F),ye&&ye.d(P),P&&y(H),le=!1,Re(ve)}}}function Fp(s,e,t){let a,o,i,n,c,l;de(s,er,$=>t(2,a=$)),de(s,Hc,$=>t(3,o=$)),de(s,Wc,$=>t(4,i=$)),de(s,Uc,$=>t(5,n=$)),de(s,Gc,$=>t(6,c=$)),de(s,br,$=>t(7,l=$));let{$$slots:u={},$$scope:p}=e,m=!1,w=!1,A,V;Jr(()=>{document.addEventListener("dragover",h),document.addEventListener("drop",T),V=br.subscribe($=>{if(!$){setTimeout(()=>t(1,w=!1),1e3);return}A&&clearTimeout(A),A=setTimeout(()=>t(1,w=!0),1e3)}),rp()}),Qr(()=>{document.removeEventListener("dragover",h),document.removeEventListener("drop",T),V&&V()});const h=$=>{var L,S,G;((S=(L=$.dataTransfer)==null?void 0:L.types)==null?void 0:S.length)>0&&((G=$.dataTransfer)==null?void 0:G.types[0])=="Files"&&($.dataTransfer.dropEffect="copy",$.stopPropagation(),$.preventDefault(),t(0,m=!0))},d=()=>{setTimeout(()=>t(0,m=!1),50)},T=$=>{t(0,m=!1);for(let L=0;L<$.dataTransfer.files.length;L++){const S=$.dataTransfer.files[L];S.name.indexOf(".yml")!=-1&&ec(S)}$.stopPropagation(),$.preventDefault()},_=()=>Qe.set([...Se(Qe)]),k=()=>jc(Op),j=()=>lc();return s.$$set=$=>{"$$scope"in $&&t(10,p=$.$$scope)},[m,w,a,o,i,n,c,l,d,_,p,u,k,j]}class jp extends fe{constructor(e){super(),ge(this,e,Fp,Lp,we,{})}}export{jp as component,Up as universal};
